
Test_7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001090  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00001090  00001124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800074  00800074  00001138  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001168  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001111  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000794  00000000  00000000  0000233d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a9  00000000  00000000  00002ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  0000337c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000520  00000000  00000000  000035b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e81  00000000  00000000  00003ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00004959  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_1>
       8:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 37       	cpi	r26, 0x7B	; 123
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9d 01 	call	0x33a	; 0x33a <main>
      8a:	0c 94 46 08 	jmp	0x108c	; 0x108c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_10>:
void lcd_speed_v2(double speed);
void lcd_coun(int encoder_count);


//[----Global_counting_encoder_signals----]
ISR(TIMER0_COMP_vect) {
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	8f 93       	push	r24
      9e:	9f 93       	push	r25
      a0:	af 93       	push	r26
      a2:	bf 93       	push	r27
	ms_ticks++;
      a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      a8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
      ac:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
      b0:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
      b4:	01 96       	adiw	r24, 0x01	; 1
      b6:	a1 1d       	adc	r26, r1
      b8:	b1 1d       	adc	r27, r1
      ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      be:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
      c2:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
      c6:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
}
      ca:	bf 91       	pop	r27
      cc:	af 91       	pop	r26
      ce:	9f 91       	pop	r25
      d0:	8f 91       	pop	r24
      d2:	0f 90       	pop	r0
      d4:	0f be       	out	0x3f, r0	; 63
      d6:	0f 90       	pop	r0
      d8:	1f 90       	pop	r1
      da:	18 95       	reti

000000dc <__vector_1>:

ISR(INT0_vect) {
      dc:	1f 92       	push	r1
      de:	0f 92       	push	r0
      e0:	0f b6       	in	r0, 0x3f	; 63
      e2:	0f 92       	push	r0
      e4:	11 24       	eor	r1, r1
      e6:	8f 93       	push	r24
      e8:	9f 93       	push	r25
      ea:	af 93       	push	r26
      ec:	bf 93       	push	r27
	encoder_count_speed++;
      ee:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <encoder_count_speed>
      f2:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <encoder_count_speed+0x1>
      f6:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <encoder_count_speed+0x2>
      fa:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <encoder_count_speed+0x3>
      fe:	01 96       	adiw	r24, 0x01	; 1
     100:	a1 1d       	adc	r26, r1
     102:	b1 1d       	adc	r27, r1
     104:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <encoder_count_speed>
     108:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <encoder_count_speed+0x1>
     10c:	a0 93 79 00 	sts	0x0079, r26	; 0x800079 <encoder_count_speed+0x2>
     110:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <encoder_count_speed+0x3>
}
     114:	bf 91       	pop	r27
     116:	af 91       	pop	r26
     118:	9f 91       	pop	r25
     11a:	8f 91       	pop	r24
     11c:	0f 90       	pop	r0
     11e:	0f be       	out	0x3f, r0	; 63
     120:	0f 90       	pop	r0
     122:	1f 90       	pop	r1
     124:	18 95       	reti

00000126 <lcd_cmd>:
	lcd_cmd(0x06);
	lcd_cmd(0x01);
}

void lcd_cmd(uint8_t cmd){
	DDRB = 0xFF;
     126:	9f ef       	ldi	r25, 0xFF	; 255
     128:	97 bb       	out	0x17, r25	; 23
	DDRA |= ((1 << E)|(1 << RS));
     12a:	9a b3       	in	r25, 0x1a	; 26
     12c:	90 6c       	ori	r25, 0xC0	; 192
     12e:	9a bb       	out	0x1a, r25	; 26
	PORTA &= ~(1<<RS);
     130:	9b b3       	in	r25, 0x1b	; 27
     132:	9f 77       	andi	r25, 0x7F	; 127
     134:	9b bb       	out	0x1b, r25	; 27
	PORTB = cmd;
     136:	88 bb       	out	0x18, r24	; 24
	PORTA |= (1 << E);
     138:	8b b3       	in	r24, 0x1b	; 27
     13a:	80 64       	ori	r24, 0x40	; 64
     13c:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_cmd+0x1a>
     140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_cmd+0x1c>
     142:	00 00       	nop
	_delay_us(5);
	PORTA &= ~(1 << E);
     144:	8b b3       	in	r24, 0x1b	; 27
     146:	8f 7b       	andi	r24, 0xBF	; 191
     148:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     14a:	87 ea       	ldi	r24, 0xA7	; 167
     14c:	91 e6       	ldi	r25, 0x61	; 97
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcd_cmd+0x28>
     152:	00 c0       	rjmp	.+0      	; 0x154 <lcd_cmd+0x2e>
     154:	00 00       	nop
     156:	08 95       	ret

00000158 <lcd_init>:

//[------------Function-----------]


void lcd_init(void){
	DDRB = 0xFF;
     158:	8f ef       	ldi	r24, 0xFF	; 255
     15a:	87 bb       	out	0x17, r24	; 23
	DDRA |= ((1 << E)|(1 << RS));
     15c:	8a b3       	in	r24, 0x1a	; 26
     15e:	80 6c       	ori	r24, 0xC0	; 192
     160:	8a bb       	out	0x1a, r24	; 26
     162:	87 ea       	ldi	r24, 0xA7	; 167
     164:	91 e6       	ldi	r25, 0x61	; 97
     166:	01 97       	sbiw	r24, 0x01	; 1
     168:	f1 f7       	brne	.-4      	; 0x166 <lcd_init+0xe>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_init+0x14>
     16c:	00 00       	nop
	_delay_ms(100);
	lcd_cmd(0x30);
     16e:	80 e3       	ldi	r24, 0x30	; 48
     170:	0e 94 93 00 	call	0x126	; 0x126 <lcd_cmd>
	lcd_cmd(0x30);
     174:	80 e3       	ldi	r24, 0x30	; 48
     176:	0e 94 93 00 	call	0x126	; 0x126 <lcd_cmd>
	lcd_cmd(0x30);
     17a:	80 e3       	ldi	r24, 0x30	; 48
     17c:	0e 94 93 00 	call	0x126	; 0x126 <lcd_cmd>
	lcd_cmd(0x38);
     180:	88 e3       	ldi	r24, 0x38	; 56
     182:	0e 94 93 00 	call	0x126	; 0x126 <lcd_cmd>
	lcd_cmd(0x0E);
     186:	8e e0       	ldi	r24, 0x0E	; 14
     188:	0e 94 93 00 	call	0x126	; 0x126 <lcd_cmd>
	lcd_cmd(0x06);
     18c:	86 e0       	ldi	r24, 0x06	; 6
     18e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_cmd>
	lcd_cmd(0x01);
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	0e 94 93 00 	call	0x126	; 0x126 <lcd_cmd>
     198:	08 95       	ret

0000019a <lcd_data>:
	_delay_ms(100);
}


void lcd_data(char data){
	DDRB = 0xFF;
     19a:	9f ef       	ldi	r25, 0xFF	; 255
     19c:	97 bb       	out	0x17, r25	; 23
	DDRA |= ((1 << E)|(1 << RS));
     19e:	9a b3       	in	r25, 0x1a	; 26
     1a0:	90 6c       	ori	r25, 0xC0	; 192
     1a2:	9a bb       	out	0x1a, r25	; 26
	PORTA |= (1 << RS);
     1a4:	9b b3       	in	r25, 0x1b	; 27
     1a6:	90 68       	ori	r25, 0x80	; 128
     1a8:	9b bb       	out	0x1b, r25	; 27
	PORTB = data;
     1aa:	88 bb       	out	0x18, r24	; 24
	PORTA |= (1 << E);
     1ac:	8b b3       	in	r24, 0x1b	; 27
     1ae:	80 64       	ori	r24, 0x40	; 64
     1b0:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_data+0x1a>
     1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcd_data+0x1c>
     1b6:	00 00       	nop
	_delay_us(5);
	PORTA &= ~(1 << E);
     1b8:	8b b3       	in	r24, 0x1b	; 27
     1ba:	8f 7b       	andi	r24, 0xBF	; 191
     1bc:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1be:	89 ef       	ldi	r24, 0xF9	; 249
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_data+0x28>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_data+0x2e>
     1c8:	00 00       	nop
     1ca:	08 95       	ret

000001cc <timer0_init>:
	_delay_ms(1);
}

void timer0_init(void) {
	TCCR0 |= (1 << WGM01); 
     1cc:	83 b7       	in	r24, 0x33	; 51
     1ce:	88 60       	ori	r24, 0x08	; 8
     1d0:	83 bf       	out	0x33, r24	; 51
	OCR0 = 124; // Compare value for 1 ms at 1 MHz and prescaler 1024
     1d2:	8c e7       	ldi	r24, 0x7C	; 124
     1d4:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1 << OCIE0); 
     1d6:	89 b7       	in	r24, 0x39	; 57
     1d8:	82 60       	ori	r24, 0x02	; 2
     1da:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= (1 << CS02) | (1 << CS00); 
     1dc:	83 b7       	in	r24, 0x33	; 51
     1de:	85 60       	ori	r24, 0x05	; 5
     1e0:	83 bf       	out	0x33, r24	; 51
	sei(); // Enable global interrupts
     1e2:	78 94       	sei
     1e4:	08 95       	ret

000001e6 <pwm_init>:
}

void pwm_init(void) {
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
     1e6:	81 ea       	ldi	r24, 0xA1	; 161
     1e8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM12) | (1 << CS11);
     1ea:	8a e0       	ldi	r24, 0x0A	; 10
     1ec:	8e bd       	out	0x2e, r24	; 46
	DDRD |= (1 << PD4) | (1 << PD5);
     1ee:	81 b3       	in	r24, 0x11	; 17
     1f0:	80 63       	ori	r24, 0x30	; 48
     1f2:	81 bb       	out	0x11, r24	; 17
     1f4:	08 95       	ret

000001f6 <global_interrupts_init>:
}

void global_interrupts_init(void) {
	MCUCR |= (1 << ISC01) | (1 << ISC11); 
     1f6:	85 b7       	in	r24, 0x35	; 53
     1f8:	8a 60       	ori	r24, 0x0A	; 10
     1fa:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0) | (1 << INT1); 
     1fc:	8b b7       	in	r24, 0x3b	; 59
     1fe:	80 6c       	ori	r24, 0xC0	; 192
     200:	8b bf       	out	0x3b, r24	; 59
	sei(); // Enable global interrupts
     202:	78 94       	sei
     204:	08 95       	ret

00000206 <lcd_coun>:
}

void lcd_coun(int encoder_count){
     206:	ef 92       	push	r14
     208:	ff 92       	push	r15
     20a:	0f 93       	push	r16
     20c:	1f 93       	push	r17
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	00 d0       	rcall	.+0      	; 0x214 <lcd_coun+0xe>
     214:	00 d0       	rcall	.+0      	; 0x216 <lcd_coun+0x10>
     216:	1f 92       	push	r1
     218:	cd b7       	in	r28, 0x3d	; 61
     21a:	de b7       	in	r29, 0x3e	; 62
     21c:	7c 01       	movw	r14, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     21e:	4a e0       	ldi	r20, 0x0A	; 10
     220:	be 01       	movw	r22, r28
     222:	6f 5f       	subi	r22, 0xFF	; 255
     224:	7f 4f       	sbci	r23, 0xFF	; 255
     226:	0e 94 11 08 	call	0x1022	; 0x1022 <__itoa_ncheck>
	
	char str[5];
	itoa(encoder_count, str, 10);
	
	lcd_cmd(0x80 | 0x40);
     22a:	80 ec       	ldi	r24, 0xC0	; 192
     22c:	0e 94 93 00 	call	0x126	; 0x126 <lcd_cmd>
	lcd_data('N');
     230:	8e e4       	ldi	r24, 0x4E	; 78
     232:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_data>
	lcd_data('o');
     236:	8f e6       	ldi	r24, 0x6F	; 111
     238:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_data>
	lcd_data('R');
     23c:	82 e5       	ldi	r24, 0x52	; 82
     23e:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_data>
	lcd_data(':');
     242:	8a e3       	ldi	r24, 0x3A	; 58
     244:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_data>
	lcd_data('0' + ((encoder_count / 1000) % 10));
     248:	c7 01       	movw	r24, r14
     24a:	68 ee       	ldi	r22, 0xE8	; 232
     24c:	73 e0       	ldi	r23, 0x03	; 3
     24e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__divmodhi4>
     252:	cb 01       	movw	r24, r22
     254:	0a e0       	ldi	r16, 0x0A	; 10
     256:	10 e0       	ldi	r17, 0x00	; 0
     258:	b8 01       	movw	r22, r16
     25a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__divmodhi4>
     25e:	80 5d       	subi	r24, 0xD0	; 208
     260:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_data>
	lcd_data('0' + ((encoder_count / 100) % 10));
     264:	c7 01       	movw	r24, r14
     266:	64 e6       	ldi	r22, 0x64	; 100
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__divmodhi4>
     26e:	cb 01       	movw	r24, r22
     270:	b8 01       	movw	r22, r16
     272:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__divmodhi4>
     276:	80 5d       	subi	r24, 0xD0	; 208
     278:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_data>
	lcd_data('0' + ((encoder_count / 10) % 10));
     27c:	c7 01       	movw	r24, r14
     27e:	b8 01       	movw	r22, r16
     280:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__divmodhi4>
     284:	f8 2e       	mov	r15, r24
     286:	cb 01       	movw	r24, r22
     288:	b8 01       	movw	r22, r16
     28a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__divmodhi4>
     28e:	80 5d       	subi	r24, 0xD0	; 208
     290:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_data>
	lcd_data('0' + (encoder_count % 10));
     294:	80 e3       	ldi	r24, 0x30	; 48
     296:	8f 0d       	add	r24, r15
     298:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_data>
}
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	1f 91       	pop	r17
     2ac:	0f 91       	pop	r16
     2ae:	ff 90       	pop	r15
     2b0:	ef 90       	pop	r14
     2b2:	08 95       	ret

000002b4 <__vector_2>:

ISR(INT0_vect) {
	encoder_count_speed++;
}

ISR(INT1_vect) {
     2b4:	1f 92       	push	r1
     2b6:	0f 92       	push	r0
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	0f 92       	push	r0
     2bc:	11 24       	eor	r1, r1
     2be:	2f 93       	push	r18
     2c0:	3f 93       	push	r19
     2c2:	4f 93       	push	r20
     2c4:	5f 93       	push	r21
     2c6:	6f 93       	push	r22
     2c8:	7f 93       	push	r23
     2ca:	8f 93       	push	r24
     2cc:	9f 93       	push	r25
     2ce:	af 93       	push	r26
     2d0:	bf 93       	push	r27
     2d2:	ef 93       	push	r30
     2d4:	ff 93       	push	r31
	if (motor_direction == 1) {
     2d6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     2da:	81 30       	cpi	r24, 0x01	; 1
     2dc:	51 f4       	brne	.+20     	; 0x2f2 <__vector_2+0x3e>
		encoder_count_turnovers++;
     2de:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <encoder_count_turnovers>
     2e2:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <encoder_count_turnovers+0x1>
     2e6:	01 96       	adiw	r24, 0x01	; 1
     2e8:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <encoder_count_turnovers+0x1>
     2ec:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <encoder_count_turnovers>
     2f0:	0d c0       	rjmp	.+26     	; 0x30c <__vector_2+0x58>
	}
	else if (motor_direction == 2) {
     2f2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     2f6:	82 30       	cpi	r24, 0x02	; 2
     2f8:	49 f4       	brne	.+18     	; 0x30c <__vector_2+0x58>
		encoder_count_turnovers--;
     2fa:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <encoder_count_turnovers>
     2fe:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <encoder_count_turnovers+0x1>
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <encoder_count_turnovers+0x1>
     308:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <encoder_count_turnovers>
	}
	lcd_coun(encoder_count_turnovers);
     30c:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <encoder_count_turnovers>
     310:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <encoder_count_turnovers+0x1>
     314:	0e 94 03 01 	call	0x206	; 0x206 <lcd_coun>
}
     318:	ff 91       	pop	r31
     31a:	ef 91       	pop	r30
     31c:	bf 91       	pop	r27
     31e:	af 91       	pop	r26
     320:	9f 91       	pop	r25
     322:	8f 91       	pop	r24
     324:	7f 91       	pop	r23
     326:	6f 91       	pop	r22
     328:	5f 91       	pop	r21
     32a:	4f 91       	pop	r20
     32c:	3f 91       	pop	r19
     32e:	2f 91       	pop	r18
     330:	0f 90       	pop	r0
     332:	0f be       	out	0x3f, r0	; 63
     334:	0f 90       	pop	r0
     336:	1f 90       	pop	r1
     338:	18 95       	reti

0000033a <main>:

int main(void) {
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
     342:	6b 97       	sbiw	r28, 0x1b	; 27
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	de bf       	out	0x3e, r29	; 62
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	cd bf       	out	0x3d, r28	; 61
	
	lcd_init();
     34e:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_init>
	timer0_init();
     352:	0e 94 e6 00 	call	0x1cc	; 0x1cc <timer0_init>
	global_interrupts_init();
     356:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <global_interrupts_init>
	pwm_init();
     35a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <pwm_init>
	
	char up_word[] = "Up  ";
     35e:	85 e0       	ldi	r24, 0x05	; 5
     360:	e4 e6       	ldi	r30, 0x64	; 100
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	de 01       	movw	r26, r28
     366:	11 96       	adiw	r26, 0x01	; 1
     368:	01 90       	ld	r0, Z+
     36a:	0d 92       	st	X+, r0
     36c:	8a 95       	dec	r24
     36e:	e1 f7       	brne	.-8      	; 0x368 <main+0x2e>
	char down_word[] = "Down";
     370:	85 e0       	ldi	r24, 0x05	; 5
     372:	e9 e6       	ldi	r30, 0x69	; 105
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	de 01       	movw	r26, r28
     378:	16 96       	adiw	r26, 0x06	; 6
     37a:	01 90       	ld	r0, Z+
     37c:	0d 92       	st	X+, r0
     37e:	8a 95       	dec	r24
     380:	e1 f7       	brne	.-8      	; 0x37a <main+0x40>
	char stop_word[] = "Stop";
     382:	85 e0       	ldi	r24, 0x05	; 5
     384:	ee e6       	ldi	r30, 0x6E	; 110
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	de 01       	movw	r26, r28
     38a:	1b 96       	adiw	r26, 0x0b	; 11
     38c:	01 90       	ld	r0, Z+
     38e:	0d 92       	st	X+, r0
     390:	8a 95       	dec	r24
     392:	e1 f7       	brne	.-8      	; 0x38c <main+0x52>

	
	DDRD &= ~(1 << PD2);
     394:	81 b3       	in	r24, 0x11	; 17
     396:	8b 7f       	andi	r24, 0xFB	; 251
     398:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << PD3);
     39a:	81 b3       	in	r24, 0x11	; 17
     39c:	87 7f       	andi	r24, 0xF7	; 247
     39e:	81 bb       	out	0x11, r24	; 17
	DDRD |= (1 << PD4) | (1 << PD5);
     3a0:	81 b3       	in	r24, 0x11	; 17
     3a2:	80 63       	ori	r24, 0x30	; 48
     3a4:	81 bb       	out	0x11, r24	; 17
	
	PORTC = 0x0F;
     3a6:	8f e0       	ldi	r24, 0x0F	; 15
     3a8:	85 bb       	out	0x15, r24	; 21
	double Ki = 0.0003;
	uint32_t last_ticks = 0;
	uint32_t last_encoder_count_speed = 0;
	uint32_t ticks_diff = 0;
	uint32_t encoder_diff_speed = 0;
	int pwm_duty = 0;
     3aa:	a1 2c       	mov	r10, r1
     3ac:	b1 2c       	mov	r11, r1
	double error = 0;
	double integral = 0;
	double Kp = 0.26;
	double Ki = 0.0003;
	uint32_t last_ticks = 0;
	uint32_t last_encoder_count_speed = 0;
     3ae:	21 2c       	mov	r2, r1
     3b0:	31 2c       	mov	r3, r1
     3b2:	21 01       	movw	r4, r2
	double target_speed = 0;
	double error = 0;
	double integral = 0;
	double Kp = 0.26;
	double Ki = 0.0003;
	uint32_t last_ticks = 0;
     3b4:	c1 2c       	mov	r12, r1
     3b6:	d1 2c       	mov	r13, r1
     3b8:	76 01       	movw	r14, r12

	double speed = 0;
	double target_speed_const = 50.0;
	double target_speed = 0;
	double error = 0;
	double integral = 0;
     3ba:	18 8e       	std	Y+24, r1	; 0x18
     3bc:	19 8e       	std	Y+25, r1	; 0x19
     3be:	1a 8e       	std	Y+26, r1	; 0x1a
     3c0:	1b 8e       	std	Y+27, r1	; 0x1b
	
	PORTC = 0x0F;

	double speed = 0;
	double target_speed_const = 50.0;
	double target_speed = 0;
     3c2:	1c 8a       	std	Y+20, r1	; 0x14
     3c4:	1d 8a       	std	Y+21, r1	; 0x15
     3c6:	1e 8a       	std	Y+22, r1	; 0x16
     3c8:	1f 8a       	std	Y+23, r1	; 0x17
	int target_count, delta_count;
	
	while (1) {
		//[-------------Checking_Button_Floor---------------]
		floor = -1;
		if (!(PINC & (1 << PINC0))) {
     3ca:	98 9b       	sbis	0x13, 0	; 19
     3cc:	09 c0       	rjmp	.+18     	; 0x3e0 <main+0xa6>
			floor = 0;
		}
		else if (!(PINC & (1 << PINC1))) {
     3ce:	99 9b       	sbis	0x13, 1	; 19
     3d0:	0a c0       	rjmp	.+20     	; 0x3e6 <main+0xac>
			floor = 1;
		}
		else if (!(PINC & (1 << PINC2))) {
     3d2:	9a 9b       	sbis	0x13, 2	; 19
     3d4:	0b c0       	rjmp	.+22     	; 0x3ec <main+0xb2>
			floor = 2;
		}
		else if (!(PINC & (1 << PINC3))) {
     3d6:	9b 9b       	sbis	0x13, 3	; 19
     3d8:	0c c0       	rjmp	.+24     	; 0x3f2 <main+0xb8>
	int floor = -1;
	int target_count, delta_count;
	
	while (1) {
		//[-------------Checking_Button_Floor---------------]
		floor = -1;
     3da:	8f ef       	ldi	r24, 0xFF	; 255
     3dc:	9f ef       	ldi	r25, 0xFF	; 255
     3de:	0b c0       	rjmp	.+22     	; 0x3f6 <main+0xbc>
		if (!(PINC & (1 << PINC0))) {
			floor = 0;
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	08 c0       	rjmp	.+16     	; 0x3f6 <main+0xbc>
		}
		else if (!(PINC & (1 << PINC1))) {
			floor = 1;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <main+0xbc>
		}
		else if (!(PINC & (1 << PINC2))) {
			floor = 2;
     3ec:	82 e0       	ldi	r24, 0x02	; 2
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <main+0xbc>
		}
		else if (!(PINC & (1 << PINC3))) {
			floor = 3;
     3f2:	83 e0       	ldi	r24, 0x03	; 3
     3f4:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		//[-------------Move_to_Floor---------------]
		if (floor != -1) {
     3f6:	8f 3f       	cpi	r24, 0xFF	; 255
     3f8:	2f ef       	ldi	r18, 0xFF	; 255
     3fa:	92 07       	cpc	r25, r18
     3fc:	09 f4       	brne	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fe:	7c c3       	rjmp	.+1784   	; 0xaf8 <__stack+0x299>
			target_count = floor * 10;
     400:	9c 01       	movw	r18, r24
     402:	22 0f       	add	r18, r18
     404:	33 1f       	adc	r19, r19
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	88 0f       	add	r24, r24
     40c:	99 1f       	adc	r25, r25
     40e:	88 0f       	add	r24, r24
     410:	99 1f       	adc	r25, r25
     412:	49 01       	movw	r8, r18
     414:	88 0e       	add	r8, r24
     416:	99 1e       	adc	r9, r25
			delta_count = target_count - encoder_count_turnovers;
     418:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <encoder_count_turnovers>
     41c:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <encoder_count_turnovers+0x1>
     420:	a4 01       	movw	r20, r8
     422:	48 1b       	sub	r20, r24
     424:	59 0b       	sbc	r21, r25
     426:	ca 01       	movw	r24, r20
			
			//[-------------Move_Up---------------]
			if (delta_count > 0) {
     428:	18 16       	cp	r1, r24
     42a:	19 06       	cpc	r1, r25
     42c:	0c f0       	brlt	.+2      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     42e:	b1 c1       	rjmp	.+866    	; 0x792 <__EEPROM_REGION_LENGTH__+0x392>
				motor_direction = 1;
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
				
				lcd_cmd((1 << 7) | 0);
     436:	80 e8       	ldi	r24, 0x80	; 128
     438:	0e 94 93 00 	call	0x126	; 0x126 <lcd_cmd>
				for (uint8_t i = 0; i < sizeof(up_word); i++) {
     43c:	10 e0       	ldi	r17, 0x00	; 0
     43e:	0a c0       	rjmp	.+20     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
					lcd_data(up_word[i]);
     440:	e1 e0       	ldi	r30, 0x01	; 1
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	ec 0f       	add	r30, r28
     446:	fd 1f       	adc	r31, r29
     448:	e1 0f       	add	r30, r17
     44a:	f1 1d       	adc	r31, r1
     44c:	80 81       	ld	r24, Z
     44e:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_data>
			//[-------------Move_Up---------------]
			if (delta_count > 0) {
				motor_direction = 1;
				
				lcd_cmd((1 << 7) | 0);
				for (uint8_t i = 0; i < sizeof(up_word); i++) {
     452:	1f 5f       	subi	r17, 0xFF	; 255
     454:	15 30       	cpi	r17, 0x05	; 5
     456:	a0 f3       	brcs	.-24     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     458:	c3 c0       	rjmp	.+390    	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
					lcd_data(up_word[i]);
				}

				while (encoder_count_turnovers < target_count - 6) {
					// update the speed every 5 ms
					if ((ms_ticks - last_ticks) >= 5) {
     45a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     45e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     462:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     466:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     46a:	8c 19       	sub	r24, r12
     46c:	9d 09       	sbc	r25, r13
     46e:	ae 09       	sbc	r26, r14
     470:	bf 09       	sbc	r27, r15
     472:	05 97       	sbiw	r24, 0x05	; 5
     474:	a1 05       	cpc	r26, r1
     476:	b1 05       	cpc	r27, r1
     478:	08 f4       	brcc	.+2      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     47a:	b2 c0       	rjmp	.+356    	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
						//gradual increase in speed
						if (target_speed < target_speed_const - 5) {
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	44 e3       	ldi	r20, 0x34	; 52
     482:	52 e4       	ldi	r21, 0x42	; 66
     484:	6c 89       	ldd	r22, Y+20	; 0x14
     486:	7d 89       	ldd	r23, Y+21	; 0x15
     488:	8e 89       	ldd	r24, Y+22	; 0x16
     48a:	9f 89       	ldd	r25, Y+23	; 0x17
     48c:	0e 94 18 06 	call	0xc30	; 0xc30 <__cmpsf2>
     490:	88 23       	and	r24, r24
     492:	7c f4       	brge	.+30     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
							target_speed += 5.0;
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 ea       	ldi	r20, 0xA0	; 160
     49a:	50 e4       	ldi	r21, 0x40	; 64
     49c:	6c 89       	ldd	r22, Y+20	; 0x14
     49e:	7d 89       	ldd	r23, Y+21	; 0x15
     4a0:	8e 89       	ldd	r24, Y+22	; 0x16
     4a2:	9f 89       	ldd	r25, Y+23	; 0x17
     4a4:	0e 94 ac 05 	call	0xb58	; 0xb58 <__addsf3>
     4a8:	6c 8b       	std	Y+20, r22	; 0x14
     4aa:	7d 8b       	std	Y+21, r23	; 0x15
     4ac:	8e 8b       	std	Y+22, r24	; 0x16
     4ae:	9f 8b       	std	Y+23, r25	; 0x17
     4b0:	08 c0       	rjmp	.+16     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
						}
						else {
							target_speed = target_speed_const;
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	a8 e4       	ldi	r26, 0x48	; 72
     4b8:	b2 e4       	ldi	r27, 0x42	; 66
     4ba:	8c 8b       	std	Y+20, r24	; 0x14
     4bc:	9d 8b       	std	Y+21, r25	; 0x15
     4be:	ae 8b       	std	Y+22, r26	; 0x16
     4c0:	bf 8b       	std	Y+23, r27	; 0x17
						}
						//speed calculation
						ticks_diff = ms_ticks - last_ticks;
     4c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     4c6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     4ca:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     4ce:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     4d2:	9c 01       	movw	r18, r24
     4d4:	ad 01       	movw	r20, r26
     4d6:	2c 19       	sub	r18, r12
     4d8:	3d 09       	sbc	r19, r13
     4da:	4e 09       	sbc	r20, r14
     4dc:	5f 09       	sbc	r21, r15
     4de:	69 01       	movw	r12, r18
     4e0:	7a 01       	movw	r14, r20
						encoder_diff_speed = encoder_count_speed - last_encoder_count_speed;
     4e2:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <encoder_count_speed>
     4e6:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <encoder_count_speed+0x1>
     4ea:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <encoder_count_speed+0x2>
     4ee:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <encoder_count_speed+0x3>
     4f2:	bc 01       	movw	r22, r24
     4f4:	cd 01       	movw	r24, r26
     4f6:	62 19       	sub	r22, r2
     4f8:	73 09       	sbc	r23, r3
     4fa:	84 09       	sbc	r24, r4
     4fc:	95 09       	sbc	r25, r5

						speed = (double)encoder_diff_speed / (double)ticks_diff * 5.0;
     4fe:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__floatunsisf>
     502:	2b 01       	movw	r4, r22
     504:	3c 01       	movw	r6, r24
     506:	c7 01       	movw	r24, r14
     508:	b6 01       	movw	r22, r12
     50a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__floatunsisf>
     50e:	9b 01       	movw	r18, r22
     510:	ac 01       	movw	r20, r24
     512:	c3 01       	movw	r24, r6
     514:	b2 01       	movw	r22, r4
     516:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__divsf3>
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	40 ea       	ldi	r20, 0xA0	; 160
     520:	50 e4       	ldi	r21, 0x40	; 64
     522:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsf3>
     526:	9b 01       	movw	r18, r22
     528:	ac 01       	movw	r20, r24

						last_ticks = ms_ticks;
     52a:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     52e:	d0 90 61 00 	lds	r13, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     532:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     536:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
						last_encoder_count_speed = encoder_count_speed;
     53a:	20 90 77 00 	lds	r2, 0x0077	; 0x800077 <encoder_count_speed>
     53e:	30 90 78 00 	lds	r3, 0x0078	; 0x800078 <encoder_count_speed+0x1>
     542:	40 90 79 00 	lds	r4, 0x0079	; 0x800079 <encoder_count_speed+0x2>
     546:	50 90 7a 00 	lds	r5, 0x007A	; 0x80007a <encoder_count_speed+0x3>

						// PI
						error = target_speed - speed;
     54a:	6c 89       	ldd	r22, Y+20	; 0x14
     54c:	7d 89       	ldd	r23, Y+21	; 0x15
     54e:	8e 89       	ldd	r24, Y+22	; 0x16
     550:	9f 89       	ldd	r25, Y+23	; 0x17
     552:	0e 94 ab 05 	call	0xb56	; 0xb56 <__subsf3>
     556:	68 8b       	std	Y+16, r22	; 0x10
     558:	79 8b       	std	Y+17, r23	; 0x11
     55a:	8a 8b       	std	Y+18, r24	; 0x12
     55c:	9b 8b       	std	Y+19, r25	; 0x13
						integral += error;
     55e:	9b 01       	movw	r18, r22
     560:	ac 01       	movw	r20, r24
     562:	68 8d       	ldd	r22, Y+24	; 0x18
     564:	79 8d       	ldd	r23, Y+25	; 0x19
     566:	8a 8d       	ldd	r24, Y+26	; 0x1a
     568:	9b 8d       	ldd	r25, Y+27	; 0x1b
     56a:	0e 94 ac 05 	call	0xb58	; 0xb58 <__addsf3>
     56e:	68 8f       	std	Y+24, r22	; 0x18
     570:	79 8f       	std	Y+25, r23	; 0x19
     572:	8a 8f       	std	Y+26, r24	; 0x1a
     574:	9b 8f       	std	Y+27, r25	; 0x1b
						double control_signal = Kp * error + Ki * integral;
     576:	28 eb       	ldi	r18, 0xB8	; 184
     578:	3e e1       	ldi	r19, 0x1E	; 30
     57a:	45 e8       	ldi	r20, 0x85	; 133
     57c:	5e e3       	ldi	r21, 0x3E	; 62
     57e:	68 89       	ldd	r22, Y+16	; 0x10
     580:	79 89       	ldd	r23, Y+17	; 0x11
     582:	8a 89       	ldd	r24, Y+18	; 0x12
     584:	9b 89       	ldd	r25, Y+19	; 0x13
     586:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsf3>
     58a:	68 8b       	std	Y+16, r22	; 0x10
     58c:	79 8b       	std	Y+17, r23	; 0x11
     58e:	8a 8b       	std	Y+18, r24	; 0x12
     590:	9b 8b       	std	Y+19, r25	; 0x13
     592:	22 e5       	ldi	r18, 0x52	; 82
     594:	39 e4       	ldi	r19, 0x49	; 73
     596:	4d e9       	ldi	r20, 0x9D	; 157
     598:	59 e3       	ldi	r21, 0x39	; 57
     59a:	68 8d       	ldd	r22, Y+24	; 0x18
     59c:	79 8d       	ldd	r23, Y+25	; 0x19
     59e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     5a0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     5a2:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsf3>
     5a6:	9b 01       	movw	r18, r22
     5a8:	ac 01       	movw	r20, r24
     5aa:	68 89       	ldd	r22, Y+16	; 0x10
     5ac:	79 89       	ldd	r23, Y+17	; 0x11
     5ae:	8a 89       	ldd	r24, Y+18	; 0x12
     5b0:	9b 89       	ldd	r25, Y+19	; 0x13
     5b2:	0e 94 ac 05 	call	0xb58	; 0xb58 <__addsf3>

						pwm_duty += (int)control_signal;
     5b6:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fixsfsi>
     5ba:	a6 0e       	add	r10, r22
     5bc:	b7 1e       	adc	r11, r23

						if (pwm_duty > 254) {
     5be:	3f ef       	ldi	r19, 0xFF	; 255
     5c0:	a3 16       	cp	r10, r19
     5c2:	b1 04       	cpc	r11, r1
     5c4:	1c f4       	brge	.+6      	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
							pwm_duty = 254;
						}
						else if (pwm_duty < 0) {
     5c6:	bb 20       	and	r11, r11
     5c8:	4c f4       	brge	.+18     	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
     5ca:	06 c0       	rjmp	.+12     	; 0x5d8 <__EEPROM_REGION_LENGTH__+0x1d8>
						double control_signal = Kp * error + Ki * integral;

						pwm_duty += (int)control_signal;

						if (pwm_duty > 254) {
							pwm_duty = 254;
     5cc:	0f 2e       	mov	r0, r31
     5ce:	fe ef       	ldi	r31, 0xFE	; 254
     5d0:	af 2e       	mov	r10, r31
     5d2:	b1 2c       	mov	r11, r1
     5d4:	f0 2d       	mov	r31, r0
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
						}
						else if (pwm_duty < 0) {
							pwm_duty = 0;
     5d8:	a1 2c       	mov	r10, r1
     5da:	b1 2c       	mov	r11, r1
						}

						OCR1B = pwm_duty;
     5dc:	b9 bc       	out	0x29, r11	; 41
     5de:	a8 bc       	out	0x28, r10	; 40
				lcd_cmd((1 << 7) | 0);
				for (uint8_t i = 0; i < sizeof(up_word); i++) {
					lcd_data(up_word[i]);
				}

				while (encoder_count_turnovers < target_count - 6) {
     5e0:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <encoder_count_turnovers>
     5e4:	30 91 76 00 	lds	r19, 0x0076	; 0x800076 <encoder_count_turnovers+0x1>
     5e8:	c4 01       	movw	r24, r8
     5ea:	06 97       	sbiw	r24, 0x06	; 6
     5ec:	28 17       	cp	r18, r24
     5ee:	39 07       	cpc	r19, r25
     5f0:	0c f4       	brge	.+2      	; 0x5f4 <__EEPROM_REGION_LENGTH__+0x1f4>
     5f2:	33 cf       	rjmp	.-410    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     5f4:	c3 c0       	rjmp	.+390    	; 0x77c <__EEPROM_REGION_LENGTH__+0x37c>
						OCR1B = pwm_duty;
					}
				}
				while (encoder_count_turnovers < target_count) { 
					// update the speed every 5 ms
					if ((ms_ticks - last_ticks) >= 5) {
     5f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     5fa:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     5fe:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     602:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     606:	8c 19       	sub	r24, r12
     608:	9d 09       	sbc	r25, r13
     60a:	ae 09       	sbc	r26, r14
     60c:	bf 09       	sbc	r27, r15
     60e:	05 97       	sbiw	r24, 0x05	; 5
     610:	a1 05       	cpc	r26, r1
     612:	b1 05       	cpc	r27, r1
     614:	08 f4       	brcc	.+2      	; 0x618 <__EEPROM_REGION_LENGTH__+0x218>
     616:	b2 c0       	rjmp	.+356    	; 0x77c <__EEPROM_REGION_LENGTH__+0x37c>
						//gradually decreasing speed
						if (target_speed > 10) {
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	40 e2       	ldi	r20, 0x20	; 32
     61e:	51 e4       	ldi	r21, 0x41	; 65
     620:	6c 89       	ldd	r22, Y+20	; 0x14
     622:	7d 89       	ldd	r23, Y+21	; 0x15
     624:	8e 89       	ldd	r24, Y+22	; 0x16
     626:	9f 89       	ldd	r25, Y+23	; 0x17
     628:	0e 94 77 07 	call	0xeee	; 0xeee <__gesf2>
     62c:	18 16       	cp	r1, r24
     62e:	7c f4       	brge	.+30     	; 0x64e <__EEPROM_REGION_LENGTH__+0x24e>
							target_speed -= 4.0;
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e8       	ldi	r20, 0x80	; 128
     636:	50 e4       	ldi	r21, 0x40	; 64
     638:	6c 89       	ldd	r22, Y+20	; 0x14
     63a:	7d 89       	ldd	r23, Y+21	; 0x15
     63c:	8e 89       	ldd	r24, Y+22	; 0x16
     63e:	9f 89       	ldd	r25, Y+23	; 0x17
     640:	0e 94 ab 05 	call	0xb56	; 0xb56 <__subsf3>
     644:	6c 8b       	std	Y+20, r22	; 0x14
     646:	7d 8b       	std	Y+21, r23	; 0x15
     648:	8e 8b       	std	Y+22, r24	; 0x16
     64a:	9f 8b       	std	Y+23, r25	; 0x17
     64c:	08 c0       	rjmp	.+16     	; 0x65e <__EEPROM_REGION_LENGTH__+0x25e>
						}
						else {
							target_speed = 10;
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	a0 e2       	ldi	r26, 0x20	; 32
     654:	b1 e4       	ldi	r27, 0x41	; 65
     656:	8c 8b       	std	Y+20, r24	; 0x14
     658:	9d 8b       	std	Y+21, r25	; 0x15
     65a:	ae 8b       	std	Y+22, r26	; 0x16
     65c:	bf 8b       	std	Y+23, r27	; 0x17
						}
						//speed calculation
						ticks_diff = ms_ticks - last_ticks;
     65e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     662:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     666:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     66a:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     66e:	9c 01       	movw	r18, r24
     670:	ad 01       	movw	r20, r26
     672:	2c 19       	sub	r18, r12
     674:	3d 09       	sbc	r19, r13
     676:	4e 09       	sbc	r20, r14
     678:	5f 09       	sbc	r21, r15
     67a:	69 01       	movw	r12, r18
     67c:	7a 01       	movw	r14, r20
						encoder_diff_speed = encoder_count_speed - last_encoder_count_speed;
     67e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <encoder_count_speed>
     682:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <encoder_count_speed+0x1>
     686:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <encoder_count_speed+0x2>
     68a:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <encoder_count_speed+0x3>
     68e:	bc 01       	movw	r22, r24
     690:	cd 01       	movw	r24, r26
     692:	62 19       	sub	r22, r2
     694:	73 09       	sbc	r23, r3
     696:	84 09       	sbc	r24, r4
     698:	95 09       	sbc	r25, r5

						speed = (double)encoder_diff_speed / (double)ticks_diff * 10.0;
     69a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__floatunsisf>
     69e:	2b 01       	movw	r4, r22
     6a0:	3c 01       	movw	r6, r24
     6a2:	c7 01       	movw	r24, r14
     6a4:	b6 01       	movw	r22, r12
     6a6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__floatunsisf>
     6aa:	9b 01       	movw	r18, r22
     6ac:	ac 01       	movw	r20, r24
     6ae:	c3 01       	movw	r24, r6
     6b0:	b2 01       	movw	r22, r4
     6b2:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__divsf3>
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	40 e2       	ldi	r20, 0x20	; 32
     6bc:	51 e4       	ldi	r21, 0x41	; 65
     6be:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsf3>
     6c2:	9b 01       	movw	r18, r22
     6c4:	ac 01       	movw	r20, r24

						last_ticks = ms_ticks;
     6c6:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     6ca:	d0 90 61 00 	lds	r13, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     6ce:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     6d2:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
						last_encoder_count_speed = encoder_count_speed;
     6d6:	20 90 77 00 	lds	r2, 0x0077	; 0x800077 <encoder_count_speed>
     6da:	30 90 78 00 	lds	r3, 0x0078	; 0x800078 <encoder_count_speed+0x1>
     6de:	40 90 79 00 	lds	r4, 0x0079	; 0x800079 <encoder_count_speed+0x2>
     6e2:	50 90 7a 00 	lds	r5, 0x007A	; 0x80007a <encoder_count_speed+0x3>

						// PI controller
						error = target_speed - speed;
     6e6:	6c 89       	ldd	r22, Y+20	; 0x14
     6e8:	7d 89       	ldd	r23, Y+21	; 0x15
     6ea:	8e 89       	ldd	r24, Y+22	; 0x16
     6ec:	9f 89       	ldd	r25, Y+23	; 0x17
     6ee:	0e 94 ab 05 	call	0xb56	; 0xb56 <__subsf3>
     6f2:	68 8b       	std	Y+16, r22	; 0x10
     6f4:	79 8b       	std	Y+17, r23	; 0x11
     6f6:	8a 8b       	std	Y+18, r24	; 0x12
     6f8:	9b 8b       	std	Y+19, r25	; 0x13
						integral += error;
     6fa:	9b 01       	movw	r18, r22
     6fc:	ac 01       	movw	r20, r24
     6fe:	68 8d       	ldd	r22, Y+24	; 0x18
     700:	79 8d       	ldd	r23, Y+25	; 0x19
     702:	8a 8d       	ldd	r24, Y+26	; 0x1a
     704:	9b 8d       	ldd	r25, Y+27	; 0x1b
     706:	0e 94 ac 05 	call	0xb58	; 0xb58 <__addsf3>
     70a:	68 8f       	std	Y+24, r22	; 0x18
     70c:	79 8f       	std	Y+25, r23	; 0x19
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	9b 8f       	std	Y+27, r25	; 0x1b
						double control_signal = Kp * error + Ki * integral;
     712:	28 eb       	ldi	r18, 0xB8	; 184
     714:	3e e1       	ldi	r19, 0x1E	; 30
     716:	45 e8       	ldi	r20, 0x85	; 133
     718:	5e e3       	ldi	r21, 0x3E	; 62
     71a:	68 89       	ldd	r22, Y+16	; 0x10
     71c:	79 89       	ldd	r23, Y+17	; 0x11
     71e:	8a 89       	ldd	r24, Y+18	; 0x12
     720:	9b 89       	ldd	r25, Y+19	; 0x13
     722:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsf3>
     726:	68 8b       	std	Y+16, r22	; 0x10
     728:	79 8b       	std	Y+17, r23	; 0x11
     72a:	8a 8b       	std	Y+18, r24	; 0x12
     72c:	9b 8b       	std	Y+19, r25	; 0x13
     72e:	22 e5       	ldi	r18, 0x52	; 82
     730:	39 e4       	ldi	r19, 0x49	; 73
     732:	4d e9       	ldi	r20, 0x9D	; 157
     734:	59 e3       	ldi	r21, 0x39	; 57
     736:	68 8d       	ldd	r22, Y+24	; 0x18
     738:	79 8d       	ldd	r23, Y+25	; 0x19
     73a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     73c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     73e:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsf3>
     742:	9b 01       	movw	r18, r22
     744:	ac 01       	movw	r20, r24
     746:	68 89       	ldd	r22, Y+16	; 0x10
     748:	79 89       	ldd	r23, Y+17	; 0x11
     74a:	8a 89       	ldd	r24, Y+18	; 0x12
     74c:	9b 89       	ldd	r25, Y+19	; 0x13
     74e:	0e 94 ac 05 	call	0xb58	; 0xb58 <__addsf3>

						pwm_duty += (int)control_signal;
     752:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fixsfsi>
     756:	a6 0e       	add	r10, r22
     758:	b7 1e       	adc	r11, r23

						if (pwm_duty > 254) {
     75a:	3f ef       	ldi	r19, 0xFF	; 255
     75c:	a3 16       	cp	r10, r19
     75e:	b1 04       	cpc	r11, r1
     760:	1c f4       	brge	.+6      	; 0x768 <__EEPROM_REGION_LENGTH__+0x368>
							pwm_duty = 254;
						}
						else if (pwm_duty < 0) {
     762:	bb 20       	and	r11, r11
     764:	4c f4       	brge	.+18     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
     766:	06 c0       	rjmp	.+12     	; 0x774 <__EEPROM_REGION_LENGTH__+0x374>
						double control_signal = Kp * error + Ki * integral;

						pwm_duty += (int)control_signal;

						if (pwm_duty > 254) {
							pwm_duty = 254;
     768:	0f 2e       	mov	r0, r31
     76a:	fe ef       	ldi	r31, 0xFE	; 254
     76c:	af 2e       	mov	r10, r31
     76e:	b1 2c       	mov	r11, r1
     770:	f0 2d       	mov	r31, r0
     772:	02 c0       	rjmp	.+4      	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
						}
						else if (pwm_duty < 0) {
							pwm_duty = 0;
     774:	a1 2c       	mov	r10, r1
     776:	b1 2c       	mov	r11, r1
						}

						OCR1B = pwm_duty;
     778:	b9 bc       	out	0x29, r11	; 41
     77a:	a8 bc       	out	0x28, r10	; 40
						}

						OCR1B = pwm_duty;
					}
				}
				while (encoder_count_turnovers < target_count) { 
     77c:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <encoder_count_turnovers>
     780:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <encoder_count_turnovers+0x1>
     784:	88 15       	cp	r24, r8
     786:	99 05       	cpc	r25, r9
     788:	0c f4       	brge	.+2      	; 0x78c <__EEPROM_REGION_LENGTH__+0x38c>
     78a:	35 cf       	rjmp	.-406    	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>

						OCR1B = pwm_duty;
					}
				}
				
				OCR1B = 0;
     78c:	19 bc       	out	0x29, r1	; 41
     78e:	18 bc       	out	0x28, r1	; 40
     790:	b3 c1       	rjmp	.+870    	; 0xaf8 <__stack+0x299>
			}
			//[-------------Move_Down---------------]
			else if (delta_count < 0) {
     792:	99 23       	and	r25, r25
     794:	0c f0       	brlt	.+2      	; 0x798 <__EEPROM_REGION_LENGTH__+0x398>
     796:	b0 c1       	rjmp	.+864    	; 0xaf8 <__stack+0x299>
				motor_direction = 2;
     798:	82 e0       	ldi	r24, 0x02	; 2
     79a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
				
				lcd_cmd((1 << 7) | 0);
     79e:	80 e8       	ldi	r24, 0x80	; 128
     7a0:	0e 94 93 00 	call	0x126	; 0x126 <lcd_cmd>
				for (uint8_t i = 0; i < sizeof(down_word); i++) {
     7a4:	10 e0       	ldi	r17, 0x00	; 0
     7a6:	0a c0       	rjmp	.+20     	; 0x7bc <__EEPROM_REGION_LENGTH__+0x3bc>
					lcd_data(down_word[i]);
     7a8:	e6 e0       	ldi	r30, 0x06	; 6
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	ec 0f       	add	r30, r28
     7ae:	fd 1f       	adc	r31, r29
     7b0:	e1 0f       	add	r30, r17
     7b2:	f1 1d       	adc	r31, r1
     7b4:	80 81       	ld	r24, Z
     7b6:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_data>
			//[-------------Move_Down---------------]
			else if (delta_count < 0) {
				motor_direction = 2;
				
				lcd_cmd((1 << 7) | 0);
				for (uint8_t i = 0; i < sizeof(down_word); i++) {
     7ba:	1f 5f       	subi	r17, 0xFF	; 255
     7bc:	15 30       	cpi	r17, 0x05	; 5
     7be:	a0 f3       	brcs	.-24     	; 0x7a8 <__EEPROM_REGION_LENGTH__+0x3a8>
     7c0:	c3 c0       	rjmp	.+390    	; 0x948 <__stack+0xe9>
					lcd_data(down_word[i]);
				}

				while (encoder_count_turnovers > target_count + 6) {
					// update the speed every 5 ms
					if ((ms_ticks - last_ticks) >= 5) {
     7c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     7c6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     7ca:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     7ce:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     7d2:	8c 19       	sub	r24, r12
     7d4:	9d 09       	sbc	r25, r13
     7d6:	ae 09       	sbc	r26, r14
     7d8:	bf 09       	sbc	r27, r15
     7da:	05 97       	sbiw	r24, 0x05	; 5
     7dc:	a1 05       	cpc	r26, r1
     7de:	b1 05       	cpc	r27, r1
     7e0:	08 f4       	brcc	.+2      	; 0x7e4 <__EEPROM_REGION_LENGTH__+0x3e4>
     7e2:	b2 c0       	rjmp	.+356    	; 0x948 <__stack+0xe9>
						//gradual increase in speed
						if (target_speed < target_speed_const - 5) {
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	44 e3       	ldi	r20, 0x34	; 52
     7ea:	52 e4       	ldi	r21, 0x42	; 66
     7ec:	6c 89       	ldd	r22, Y+20	; 0x14
     7ee:	7d 89       	ldd	r23, Y+21	; 0x15
     7f0:	8e 89       	ldd	r24, Y+22	; 0x16
     7f2:	9f 89       	ldd	r25, Y+23	; 0x17
     7f4:	0e 94 18 06 	call	0xc30	; 0xc30 <__cmpsf2>
     7f8:	88 23       	and	r24, r24
     7fa:	7c f4       	brge	.+30     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
							target_speed += 5.0;
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	40 ea       	ldi	r20, 0xA0	; 160
     802:	50 e4       	ldi	r21, 0x40	; 64
     804:	6c 89       	ldd	r22, Y+20	; 0x14
     806:	7d 89       	ldd	r23, Y+21	; 0x15
     808:	8e 89       	ldd	r24, Y+22	; 0x16
     80a:	9f 89       	ldd	r25, Y+23	; 0x17
     80c:	0e 94 ac 05 	call	0xb58	; 0xb58 <__addsf3>
     810:	6c 8b       	std	Y+20, r22	; 0x14
     812:	7d 8b       	std	Y+21, r23	; 0x15
     814:	8e 8b       	std	Y+22, r24	; 0x16
     816:	9f 8b       	std	Y+23, r25	; 0x17
     818:	08 c0       	rjmp	.+16     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
						}
						else {
							target_speed = target_speed_const;
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	a8 e4       	ldi	r26, 0x48	; 72
     820:	b2 e4       	ldi	r27, 0x42	; 66
     822:	8c 8b       	std	Y+20, r24	; 0x14
     824:	9d 8b       	std	Y+21, r25	; 0x15
     826:	ae 8b       	std	Y+22, r26	; 0x16
     828:	bf 8b       	std	Y+23, r27	; 0x17
						}
						//speed calculation
						ticks_diff = ms_ticks - last_ticks;
     82a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     82e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     832:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     836:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     83a:	9c 01       	movw	r18, r24
     83c:	ad 01       	movw	r20, r26
     83e:	2c 19       	sub	r18, r12
     840:	3d 09       	sbc	r19, r13
     842:	4e 09       	sbc	r20, r14
     844:	5f 09       	sbc	r21, r15
     846:	69 01       	movw	r12, r18
     848:	7a 01       	movw	r14, r20
						encoder_diff_speed = encoder_count_speed - last_encoder_count_speed;
     84a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <encoder_count_speed>
     84e:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <encoder_count_speed+0x1>
     852:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <encoder_count_speed+0x2>
     856:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <encoder_count_speed+0x3>
     85a:	bc 01       	movw	r22, r24
     85c:	cd 01       	movw	r24, r26
     85e:	62 19       	sub	r22, r2
     860:	73 09       	sbc	r23, r3
     862:	84 09       	sbc	r24, r4
     864:	95 09       	sbc	r25, r5

						speed = (double)encoder_diff_speed / (double)ticks_diff * 10.0;
     866:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__floatunsisf>
     86a:	2b 01       	movw	r4, r22
     86c:	3c 01       	movw	r6, r24
     86e:	c7 01       	movw	r24, r14
     870:	b6 01       	movw	r22, r12
     872:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__floatunsisf>
     876:	9b 01       	movw	r18, r22
     878:	ac 01       	movw	r20, r24
     87a:	c3 01       	movw	r24, r6
     87c:	b2 01       	movw	r22, r4
     87e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__divsf3>
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	40 e2       	ldi	r20, 0x20	; 32
     888:	51 e4       	ldi	r21, 0x41	; 65
     88a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsf3>
     88e:	9b 01       	movw	r18, r22
     890:	ac 01       	movw	r20, r24

						last_ticks = ms_ticks;
     892:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     896:	d0 90 61 00 	lds	r13, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     89a:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     89e:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
						last_encoder_count_speed = encoder_count_speed;
     8a2:	20 90 77 00 	lds	r2, 0x0077	; 0x800077 <encoder_count_speed>
     8a6:	30 90 78 00 	lds	r3, 0x0078	; 0x800078 <encoder_count_speed+0x1>
     8aa:	40 90 79 00 	lds	r4, 0x0079	; 0x800079 <encoder_count_speed+0x2>
     8ae:	50 90 7a 00 	lds	r5, 0x007A	; 0x80007a <encoder_count_speed+0x3>

						// PI controller
						error = target_speed - speed;
     8b2:	6c 89       	ldd	r22, Y+20	; 0x14
     8b4:	7d 89       	ldd	r23, Y+21	; 0x15
     8b6:	8e 89       	ldd	r24, Y+22	; 0x16
     8b8:	9f 89       	ldd	r25, Y+23	; 0x17
     8ba:	0e 94 ab 05 	call	0xb56	; 0xb56 <__subsf3>
     8be:	68 8b       	std	Y+16, r22	; 0x10
     8c0:	79 8b       	std	Y+17, r23	; 0x11
     8c2:	8a 8b       	std	Y+18, r24	; 0x12
     8c4:	9b 8b       	std	Y+19, r25	; 0x13
						integral += error;
     8c6:	9b 01       	movw	r18, r22
     8c8:	ac 01       	movw	r20, r24
     8ca:	68 8d       	ldd	r22, Y+24	; 0x18
     8cc:	79 8d       	ldd	r23, Y+25	; 0x19
     8ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8d0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8d2:	0e 94 ac 05 	call	0xb58	; 0xb58 <__addsf3>
     8d6:	68 8f       	std	Y+24, r22	; 0x18
     8d8:	79 8f       	std	Y+25, r23	; 0x19
     8da:	8a 8f       	std	Y+26, r24	; 0x1a
     8dc:	9b 8f       	std	Y+27, r25	; 0x1b
						double control_signal = Kp * error + Ki * integral;
     8de:	28 eb       	ldi	r18, 0xB8	; 184
     8e0:	3e e1       	ldi	r19, 0x1E	; 30
     8e2:	45 e8       	ldi	r20, 0x85	; 133
     8e4:	5e e3       	ldi	r21, 0x3E	; 62
     8e6:	68 89       	ldd	r22, Y+16	; 0x10
     8e8:	79 89       	ldd	r23, Y+17	; 0x11
     8ea:	8a 89       	ldd	r24, Y+18	; 0x12
     8ec:	9b 89       	ldd	r25, Y+19	; 0x13
     8ee:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsf3>
     8f2:	68 8b       	std	Y+16, r22	; 0x10
     8f4:	79 8b       	std	Y+17, r23	; 0x11
     8f6:	8a 8b       	std	Y+18, r24	; 0x12
     8f8:	9b 8b       	std	Y+19, r25	; 0x13
     8fa:	22 e5       	ldi	r18, 0x52	; 82
     8fc:	39 e4       	ldi	r19, 0x49	; 73
     8fe:	4d e9       	ldi	r20, 0x9D	; 157
     900:	59 e3       	ldi	r21, 0x39	; 57
     902:	68 8d       	ldd	r22, Y+24	; 0x18
     904:	79 8d       	ldd	r23, Y+25	; 0x19
     906:	8a 8d       	ldd	r24, Y+26	; 0x1a
     908:	9b 8d       	ldd	r25, Y+27	; 0x1b
     90a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsf3>
     90e:	9b 01       	movw	r18, r22
     910:	ac 01       	movw	r20, r24
     912:	68 89       	ldd	r22, Y+16	; 0x10
     914:	79 89       	ldd	r23, Y+17	; 0x11
     916:	8a 89       	ldd	r24, Y+18	; 0x12
     918:	9b 89       	ldd	r25, Y+19	; 0x13
     91a:	0e 94 ac 05 	call	0xb58	; 0xb58 <__addsf3>

						pwm_duty += (int)control_signal;
     91e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fixsfsi>
     922:	a6 0e       	add	r10, r22
     924:	b7 1e       	adc	r11, r23

						if (pwm_duty > 254) {
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	a3 16       	cp	r10, r19
     92a:	b1 04       	cpc	r11, r1
     92c:	1c f4       	brge	.+6      	; 0x934 <__stack+0xd5>
							pwm_duty = 254;
						}
						else if (pwm_duty < 0) {
     92e:	bb 20       	and	r11, r11
     930:	4c f4       	brge	.+18     	; 0x944 <__stack+0xe5>
     932:	06 c0       	rjmp	.+12     	; 0x940 <__stack+0xe1>
						double control_signal = Kp * error + Ki * integral;

						pwm_duty += (int)control_signal;

						if (pwm_duty > 254) {
							pwm_duty = 254;
     934:	0f 2e       	mov	r0, r31
     936:	fe ef       	ldi	r31, 0xFE	; 254
     938:	af 2e       	mov	r10, r31
     93a:	b1 2c       	mov	r11, r1
     93c:	f0 2d       	mov	r31, r0
     93e:	02 c0       	rjmp	.+4      	; 0x944 <__stack+0xe5>
						}
						else if (pwm_duty < 0) {
							pwm_duty = 0;
     940:	a1 2c       	mov	r10, r1
     942:	b1 2c       	mov	r11, r1
						}

						OCR1A = pwm_duty;
     944:	bb bc       	out	0x2b, r11	; 43
     946:	aa bc       	out	0x2a, r10	; 42
				lcd_cmd((1 << 7) | 0);
				for (uint8_t i = 0; i < sizeof(down_word); i++) {
					lcd_data(down_word[i]);
				}

				while (encoder_count_turnovers > target_count + 6) {
     948:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <encoder_count_turnovers>
     94c:	30 91 76 00 	lds	r19, 0x0076	; 0x800076 <encoder_count_turnovers+0x1>
     950:	c4 01       	movw	r24, r8
     952:	06 96       	adiw	r24, 0x06	; 6
     954:	82 17       	cp	r24, r18
     956:	93 07       	cpc	r25, r19
     958:	0c f4       	brge	.+2      	; 0x95c <__stack+0xfd>
     95a:	33 cf       	rjmp	.-410    	; 0x7c2 <__EEPROM_REGION_LENGTH__+0x3c2>
     95c:	c3 c0       	rjmp	.+390    	; 0xae4 <__stack+0x285>
						OCR1A = pwm_duty;
					}
				}
				while (encoder_count_turnovers > target_count) { 
					// update the speed every 5 ms
					if ((ms_ticks - last_ticks) >= 5) {
     95e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     962:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     966:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     96a:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     96e:	8c 19       	sub	r24, r12
     970:	9d 09       	sbc	r25, r13
     972:	ae 09       	sbc	r26, r14
     974:	bf 09       	sbc	r27, r15
     976:	05 97       	sbiw	r24, 0x05	; 5
     978:	a1 05       	cpc	r26, r1
     97a:	b1 05       	cpc	r27, r1
     97c:	08 f4       	brcc	.+2      	; 0x980 <__stack+0x121>
     97e:	b2 c0       	rjmp	.+356    	; 0xae4 <__stack+0x285>
						//gradually decreasing speed
						if (target_speed > 10) {
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	40 e2       	ldi	r20, 0x20	; 32
     986:	51 e4       	ldi	r21, 0x41	; 65
     988:	6c 89       	ldd	r22, Y+20	; 0x14
     98a:	7d 89       	ldd	r23, Y+21	; 0x15
     98c:	8e 89       	ldd	r24, Y+22	; 0x16
     98e:	9f 89       	ldd	r25, Y+23	; 0x17
     990:	0e 94 77 07 	call	0xeee	; 0xeee <__gesf2>
     994:	18 16       	cp	r1, r24
     996:	7c f4       	brge	.+30     	; 0x9b6 <__stack+0x157>
							target_speed -= 4.0;
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	40 e8       	ldi	r20, 0x80	; 128
     99e:	50 e4       	ldi	r21, 0x40	; 64
     9a0:	6c 89       	ldd	r22, Y+20	; 0x14
     9a2:	7d 89       	ldd	r23, Y+21	; 0x15
     9a4:	8e 89       	ldd	r24, Y+22	; 0x16
     9a6:	9f 89       	ldd	r25, Y+23	; 0x17
     9a8:	0e 94 ab 05 	call	0xb56	; 0xb56 <__subsf3>
     9ac:	6c 8b       	std	Y+20, r22	; 0x14
     9ae:	7d 8b       	std	Y+21, r23	; 0x15
     9b0:	8e 8b       	std	Y+22, r24	; 0x16
     9b2:	9f 8b       	std	Y+23, r25	; 0x17
     9b4:	08 c0       	rjmp	.+16     	; 0x9c6 <__stack+0x167>
						}
						else {
							target_speed = 10;
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	a0 e2       	ldi	r26, 0x20	; 32
     9bc:	b1 e4       	ldi	r27, 0x41	; 65
     9be:	8c 8b       	std	Y+20, r24	; 0x14
     9c0:	9d 8b       	std	Y+21, r25	; 0x15
     9c2:	ae 8b       	std	Y+22, r26	; 0x16
     9c4:	bf 8b       	std	Y+23, r27	; 0x17
						}
						//speed calculation
						ticks_diff = ms_ticks - last_ticks;
     9c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     9ca:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     9ce:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     9d2:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     9d6:	9c 01       	movw	r18, r24
     9d8:	ad 01       	movw	r20, r26
     9da:	2c 19       	sub	r18, r12
     9dc:	3d 09       	sbc	r19, r13
     9de:	4e 09       	sbc	r20, r14
     9e0:	5f 09       	sbc	r21, r15
     9e2:	69 01       	movw	r12, r18
     9e4:	7a 01       	movw	r14, r20
						encoder_diff_speed = encoder_count_speed - last_encoder_count_speed;
     9e6:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <encoder_count_speed>
     9ea:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <encoder_count_speed+0x1>
     9ee:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <encoder_count_speed+0x2>
     9f2:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <encoder_count_speed+0x3>
     9f6:	bc 01       	movw	r22, r24
     9f8:	cd 01       	movw	r24, r26
     9fa:	62 19       	sub	r22, r2
     9fc:	73 09       	sbc	r23, r3
     9fe:	84 09       	sbc	r24, r4
     a00:	95 09       	sbc	r25, r5

						speed = (double)encoder_diff_speed / (double)ticks_diff * 10.0;
     a02:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__floatunsisf>
     a06:	2b 01       	movw	r4, r22
     a08:	3c 01       	movw	r6, r24
     a0a:	c7 01       	movw	r24, r14
     a0c:	b6 01       	movw	r22, r12
     a0e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__floatunsisf>
     a12:	9b 01       	movw	r18, r22
     a14:	ac 01       	movw	r20, r24
     a16:	c3 01       	movw	r24, r6
     a18:	b2 01       	movw	r22, r4
     a1a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__divsf3>
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e2       	ldi	r20, 0x20	; 32
     a24:	51 e4       	ldi	r21, 0x41	; 65
     a26:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsf3>
     a2a:	9b 01       	movw	r18, r22
     a2c:	ac 01       	movw	r20, r24

						last_ticks = ms_ticks;
     a2e:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     a32:	d0 90 61 00 	lds	r13, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     a36:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     a3a:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
						last_encoder_count_speed = encoder_count_speed;
     a3e:	20 90 77 00 	lds	r2, 0x0077	; 0x800077 <encoder_count_speed>
     a42:	30 90 78 00 	lds	r3, 0x0078	; 0x800078 <encoder_count_speed+0x1>
     a46:	40 90 79 00 	lds	r4, 0x0079	; 0x800079 <encoder_count_speed+0x2>
     a4a:	50 90 7a 00 	lds	r5, 0x007A	; 0x80007a <encoder_count_speed+0x3>

						// PI controller
						error = target_speed - speed;
     a4e:	6c 89       	ldd	r22, Y+20	; 0x14
     a50:	7d 89       	ldd	r23, Y+21	; 0x15
     a52:	8e 89       	ldd	r24, Y+22	; 0x16
     a54:	9f 89       	ldd	r25, Y+23	; 0x17
     a56:	0e 94 ab 05 	call	0xb56	; 0xb56 <__subsf3>
     a5a:	68 8b       	std	Y+16, r22	; 0x10
     a5c:	79 8b       	std	Y+17, r23	; 0x11
     a5e:	8a 8b       	std	Y+18, r24	; 0x12
     a60:	9b 8b       	std	Y+19, r25	; 0x13
						integral += error;
     a62:	9b 01       	movw	r18, r22
     a64:	ac 01       	movw	r20, r24
     a66:	68 8d       	ldd	r22, Y+24	; 0x18
     a68:	79 8d       	ldd	r23, Y+25	; 0x19
     a6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a6c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a6e:	0e 94 ac 05 	call	0xb58	; 0xb58 <__addsf3>
     a72:	68 8f       	std	Y+24, r22	; 0x18
     a74:	79 8f       	std	Y+25, r23	; 0x19
     a76:	8a 8f       	std	Y+26, r24	; 0x1a
     a78:	9b 8f       	std	Y+27, r25	; 0x1b
						double control_signal = Kp * error + Ki * integral;
     a7a:	28 eb       	ldi	r18, 0xB8	; 184
     a7c:	3e e1       	ldi	r19, 0x1E	; 30
     a7e:	45 e8       	ldi	r20, 0x85	; 133
     a80:	5e e3       	ldi	r21, 0x3E	; 62
     a82:	68 89       	ldd	r22, Y+16	; 0x10
     a84:	79 89       	ldd	r23, Y+17	; 0x11
     a86:	8a 89       	ldd	r24, Y+18	; 0x12
     a88:	9b 89       	ldd	r25, Y+19	; 0x13
     a8a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsf3>
     a8e:	68 8b       	std	Y+16, r22	; 0x10
     a90:	79 8b       	std	Y+17, r23	; 0x11
     a92:	8a 8b       	std	Y+18, r24	; 0x12
     a94:	9b 8b       	std	Y+19, r25	; 0x13
     a96:	22 e5       	ldi	r18, 0x52	; 82
     a98:	39 e4       	ldi	r19, 0x49	; 73
     a9a:	4d e9       	ldi	r20, 0x9D	; 157
     a9c:	59 e3       	ldi	r21, 0x39	; 57
     a9e:	68 8d       	ldd	r22, Y+24	; 0x18
     aa0:	79 8d       	ldd	r23, Y+25	; 0x19
     aa2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     aa4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     aa6:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsf3>
     aaa:	9b 01       	movw	r18, r22
     aac:	ac 01       	movw	r20, r24
     aae:	68 89       	ldd	r22, Y+16	; 0x10
     ab0:	79 89       	ldd	r23, Y+17	; 0x11
     ab2:	8a 89       	ldd	r24, Y+18	; 0x12
     ab4:	9b 89       	ldd	r25, Y+19	; 0x13
     ab6:	0e 94 ac 05 	call	0xb58	; 0xb58 <__addsf3>

						
						pwm_duty += (int)control_signal;
     aba:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fixsfsi>
     abe:	a6 0e       	add	r10, r22
     ac0:	b7 1e       	adc	r11, r23

						if (pwm_duty > 254) {
     ac2:	3f ef       	ldi	r19, 0xFF	; 255
     ac4:	a3 16       	cp	r10, r19
     ac6:	b1 04       	cpc	r11, r1
     ac8:	1c f4       	brge	.+6      	; 0xad0 <__stack+0x271>
							pwm_duty = 254;
						}
						else if (pwm_duty < 0) {
     aca:	bb 20       	and	r11, r11
     acc:	4c f4       	brge	.+18     	; 0xae0 <__stack+0x281>
     ace:	06 c0       	rjmp	.+12     	; 0xadc <__stack+0x27d>

						
						pwm_duty += (int)control_signal;

						if (pwm_duty > 254) {
							pwm_duty = 254;
     ad0:	0f 2e       	mov	r0, r31
     ad2:	fe ef       	ldi	r31, 0xFE	; 254
     ad4:	af 2e       	mov	r10, r31
     ad6:	b1 2c       	mov	r11, r1
     ad8:	f0 2d       	mov	r31, r0
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <__stack+0x281>
						}
						else if (pwm_duty < 0) {
							pwm_duty = 0;
     adc:	a1 2c       	mov	r10, r1
     ade:	b1 2c       	mov	r11, r1
						}

						OCR1A = pwm_duty;
     ae0:	bb bc       	out	0x2b, r11	; 43
     ae2:	aa bc       	out	0x2a, r10	; 42
						}

						OCR1A = pwm_duty;
					}
				}
				while (encoder_count_turnovers > target_count) { 
     ae4:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <encoder_count_turnovers>
     ae8:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <encoder_count_turnovers+0x1>
     aec:	88 16       	cp	r8, r24
     aee:	99 06       	cpc	r9, r25
     af0:	0c f4       	brge	.+2      	; 0xaf4 <__stack+0x295>
     af2:	35 cf       	rjmp	.-406    	; 0x95e <__stack+0xff>

						OCR1A = pwm_duty;
					}
				}
				
				OCR1A = 0;
     af4:	1b bc       	out	0x2b, r1	; 43
     af6:	1a bc       	out	0x2a, r1	; 42
			}
		}


		//[-------------Stop---------------]
		motor_direction = 0;
     af8:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
     afc:	4f e3       	ldi	r20, 0x3F	; 63
     afe:	5d e0       	ldi	r21, 0x0D	; 13
     b00:	83 e0       	ldi	r24, 0x03	; 3
     b02:	41 50       	subi	r20, 0x01	; 1
     b04:	50 40       	sbci	r21, 0x00	; 0
     b06:	80 40       	sbci	r24, 0x00	; 0
     b08:	e1 f7       	brne	.-8      	; 0xb02 <__stack+0x2a3>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <__stack+0x2ad>
     b0c:	00 00       	nop
		_delay_ms(1000);
		lcd_cmd(1);
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	0e 94 93 00 	call	0x126	; 0x126 <lcd_cmd>
		lcd_cmd((1 << 7) | 0);
     b14:	80 e8       	ldi	r24, 0x80	; 128
     b16:	0e 94 93 00 	call	0x126	; 0x126 <lcd_cmd>
		
		for (uint8_t i = 0; i < sizeof(stop_word); i++) {
     b1a:	10 e0       	ldi	r17, 0x00	; 0
     b1c:	0a c0       	rjmp	.+20     	; 0xb32 <__stack+0x2d3>
			lcd_data(stop_word[i]);
     b1e:	eb e0       	ldi	r30, 0x0B	; 11
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	ec 0f       	add	r30, r28
     b24:	fd 1f       	adc	r31, r29
     b26:	e1 0f       	add	r30, r17
     b28:	f1 1d       	adc	r31, r1
     b2a:	80 81       	ld	r24, Z
     b2c:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_data>
		motor_direction = 0;
		_delay_ms(1000);
		lcd_cmd(1);
		lcd_cmd((1 << 7) | 0);
		
		for (uint8_t i = 0; i < sizeof(stop_word); i++) {
     b30:	1f 5f       	subi	r17, 0xFF	; 255
     b32:	15 30       	cpi	r17, 0x05	; 5
     b34:	a0 f3       	brcs	.-24     	; 0xb1e <__stack+0x2bf>
     b36:	9f e3       	ldi	r25, 0x3F	; 63
     b38:	ad e0       	ldi	r26, 0x0D	; 13
     b3a:	b3 e0       	ldi	r27, 0x03	; 3
     b3c:	91 50       	subi	r25, 0x01	; 1
     b3e:	a0 40       	sbci	r26, 0x00	; 0
     b40:	b0 40       	sbci	r27, 0x00	; 0
     b42:	e1 f7       	brne	.-8      	; 0xb3c <__stack+0x2dd>
     b44:	00 c0       	rjmp	.+0      	; 0xb46 <__stack+0x2e7>
     b46:	00 00       	nop
			lcd_data(stop_word[i]);
		}
		_delay_ms(1000);
		lcd_coun(encoder_count_turnovers);
     b48:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <encoder_count_turnovers>
     b4c:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <encoder_count_turnovers+0x1>
     b50:	0e 94 03 01 	call	0x206	; 0x206 <lcd_coun>
	}
     b54:	3a cc       	rjmp	.-1932   	; 0x3ca <main+0x90>

00000b56 <__subsf3>:
     b56:	50 58       	subi	r21, 0x80	; 128

00000b58 <__addsf3>:
     b58:	bb 27       	eor	r27, r27
     b5a:	aa 27       	eor	r26, r26
     b5c:	0e 94 c3 05 	call	0xb86	; 0xb86 <__addsf3x>
     b60:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__fp_round>
     b64:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__fp_pscA>
     b68:	38 f0       	brcs	.+14     	; 0xb78 <__addsf3+0x20>
     b6a:	0e 94 36 07 	call	0xe6c	; 0xe6c <__fp_pscB>
     b6e:	20 f0       	brcs	.+8      	; 0xb78 <__addsf3+0x20>
     b70:	39 f4       	brne	.+14     	; 0xb80 <__addsf3+0x28>
     b72:	9f 3f       	cpi	r25, 0xFF	; 255
     b74:	19 f4       	brne	.+6      	; 0xb7c <__addsf3+0x24>
     b76:	26 f4       	brtc	.+8      	; 0xb80 <__addsf3+0x28>
     b78:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__fp_nan>
     b7c:	0e f4       	brtc	.+2      	; 0xb80 <__addsf3+0x28>
     b7e:	e0 95       	com	r30
     b80:	e7 fb       	bst	r30, 7
     b82:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_inf>

00000b86 <__addsf3x>:
     b86:	e9 2f       	mov	r30, r25
     b88:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__fp_split3>
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__addsf3+0xc>
     b8e:	ba 17       	cp	r27, r26
     b90:	62 07       	cpc	r22, r18
     b92:	73 07       	cpc	r23, r19
     b94:	84 07       	cpc	r24, r20
     b96:	95 07       	cpc	r25, r21
     b98:	20 f0       	brcs	.+8      	; 0xba2 <__addsf3x+0x1c>
     b9a:	79 f4       	brne	.+30     	; 0xbba <__addsf3x+0x34>
     b9c:	a6 f5       	brtc	.+104    	; 0xc06 <__addsf3x+0x80>
     b9e:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__fp_zero>
     ba2:	0e f4       	brtc	.+2      	; 0xba6 <__addsf3x+0x20>
     ba4:	e0 95       	com	r30
     ba6:	0b 2e       	mov	r0, r27
     ba8:	ba 2f       	mov	r27, r26
     baa:	a0 2d       	mov	r26, r0
     bac:	0b 01       	movw	r0, r22
     bae:	b9 01       	movw	r22, r18
     bb0:	90 01       	movw	r18, r0
     bb2:	0c 01       	movw	r0, r24
     bb4:	ca 01       	movw	r24, r20
     bb6:	a0 01       	movw	r20, r0
     bb8:	11 24       	eor	r1, r1
     bba:	ff 27       	eor	r31, r31
     bbc:	59 1b       	sub	r21, r25
     bbe:	99 f0       	breq	.+38     	; 0xbe6 <__addsf3x+0x60>
     bc0:	59 3f       	cpi	r21, 0xF9	; 249
     bc2:	50 f4       	brcc	.+20     	; 0xbd8 <__addsf3x+0x52>
     bc4:	50 3e       	cpi	r21, 0xE0	; 224
     bc6:	68 f1       	brcs	.+90     	; 0xc22 <__addsf3x+0x9c>
     bc8:	1a 16       	cp	r1, r26
     bca:	f0 40       	sbci	r31, 0x00	; 0
     bcc:	a2 2f       	mov	r26, r18
     bce:	23 2f       	mov	r18, r19
     bd0:	34 2f       	mov	r19, r20
     bd2:	44 27       	eor	r20, r20
     bd4:	58 5f       	subi	r21, 0xF8	; 248
     bd6:	f3 cf       	rjmp	.-26     	; 0xbbe <__addsf3x+0x38>
     bd8:	46 95       	lsr	r20
     bda:	37 95       	ror	r19
     bdc:	27 95       	ror	r18
     bde:	a7 95       	ror	r26
     be0:	f0 40       	sbci	r31, 0x00	; 0
     be2:	53 95       	inc	r21
     be4:	c9 f7       	brne	.-14     	; 0xbd8 <__addsf3x+0x52>
     be6:	7e f4       	brtc	.+30     	; 0xc06 <__addsf3x+0x80>
     be8:	1f 16       	cp	r1, r31
     bea:	ba 0b       	sbc	r27, r26
     bec:	62 0b       	sbc	r22, r18
     bee:	73 0b       	sbc	r23, r19
     bf0:	84 0b       	sbc	r24, r20
     bf2:	ba f0       	brmi	.+46     	; 0xc22 <__addsf3x+0x9c>
     bf4:	91 50       	subi	r25, 0x01	; 1
     bf6:	a1 f0       	breq	.+40     	; 0xc20 <__addsf3x+0x9a>
     bf8:	ff 0f       	add	r31, r31
     bfa:	bb 1f       	adc	r27, r27
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	88 1f       	adc	r24, r24
     c02:	c2 f7       	brpl	.-16     	; 0xbf4 <__addsf3x+0x6e>
     c04:	0e c0       	rjmp	.+28     	; 0xc22 <__addsf3x+0x9c>
     c06:	ba 0f       	add	r27, r26
     c08:	62 1f       	adc	r22, r18
     c0a:	73 1f       	adc	r23, r19
     c0c:	84 1f       	adc	r24, r20
     c0e:	48 f4       	brcc	.+18     	; 0xc22 <__addsf3x+0x9c>
     c10:	87 95       	ror	r24
     c12:	77 95       	ror	r23
     c14:	67 95       	ror	r22
     c16:	b7 95       	ror	r27
     c18:	f7 95       	ror	r31
     c1a:	9e 3f       	cpi	r25, 0xFE	; 254
     c1c:	08 f0       	brcs	.+2      	; 0xc20 <__addsf3x+0x9a>
     c1e:	b0 cf       	rjmp	.-160    	; 0xb80 <__addsf3+0x28>
     c20:	93 95       	inc	r25
     c22:	88 0f       	add	r24, r24
     c24:	08 f0       	brcs	.+2      	; 0xc28 <__addsf3x+0xa2>
     c26:	99 27       	eor	r25, r25
     c28:	ee 0f       	add	r30, r30
     c2a:	97 95       	ror	r25
     c2c:	87 95       	ror	r24
     c2e:	08 95       	ret

00000c30 <__cmpsf2>:
     c30:	0e 94 02 07 	call	0xe04	; 0xe04 <__fp_cmp>
     c34:	08 f4       	brcc	.+2      	; 0xc38 <__cmpsf2+0x8>
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	08 95       	ret

00000c3a <__divsf3>:
     c3a:	0e 94 31 06 	call	0xc62	; 0xc62 <__divsf3x>
     c3e:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__fp_round>
     c42:	0e 94 36 07 	call	0xe6c	; 0xe6c <__fp_pscB>
     c46:	58 f0       	brcs	.+22     	; 0xc5e <__divsf3+0x24>
     c48:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__fp_pscA>
     c4c:	40 f0       	brcs	.+16     	; 0xc5e <__divsf3+0x24>
     c4e:	29 f4       	brne	.+10     	; 0xc5a <__divsf3+0x20>
     c50:	5f 3f       	cpi	r21, 0xFF	; 255
     c52:	29 f0       	breq	.+10     	; 0xc5e <__divsf3+0x24>
     c54:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_inf>
     c58:	51 11       	cpse	r21, r1
     c5a:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_szero>
     c5e:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__fp_nan>

00000c62 <__divsf3x>:
     c62:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__fp_split3>
     c66:	68 f3       	brcs	.-38     	; 0xc42 <__divsf3+0x8>

00000c68 <__divsf3_pse>:
     c68:	99 23       	and	r25, r25
     c6a:	b1 f3       	breq	.-20     	; 0xc58 <__divsf3+0x1e>
     c6c:	55 23       	and	r21, r21
     c6e:	91 f3       	breq	.-28     	; 0xc54 <__divsf3+0x1a>
     c70:	95 1b       	sub	r25, r21
     c72:	55 0b       	sbc	r21, r21
     c74:	bb 27       	eor	r27, r27
     c76:	aa 27       	eor	r26, r26
     c78:	62 17       	cp	r22, r18
     c7a:	73 07       	cpc	r23, r19
     c7c:	84 07       	cpc	r24, r20
     c7e:	38 f0       	brcs	.+14     	; 0xc8e <__divsf3_pse+0x26>
     c80:	9f 5f       	subi	r25, 0xFF	; 255
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	22 0f       	add	r18, r18
     c86:	33 1f       	adc	r19, r19
     c88:	44 1f       	adc	r20, r20
     c8a:	aa 1f       	adc	r26, r26
     c8c:	a9 f3       	breq	.-22     	; 0xc78 <__divsf3_pse+0x10>
     c8e:	35 d0       	rcall	.+106    	; 0xcfa <__divsf3_pse+0x92>
     c90:	0e 2e       	mov	r0, r30
     c92:	3a f0       	brmi	.+14     	; 0xca2 <__divsf3_pse+0x3a>
     c94:	e0 e8       	ldi	r30, 0x80	; 128
     c96:	32 d0       	rcall	.+100    	; 0xcfc <__divsf3_pse+0x94>
     c98:	91 50       	subi	r25, 0x01	; 1
     c9a:	50 40       	sbci	r21, 0x00	; 0
     c9c:	e6 95       	lsr	r30
     c9e:	00 1c       	adc	r0, r0
     ca0:	ca f7       	brpl	.-14     	; 0xc94 <__divsf3_pse+0x2c>
     ca2:	2b d0       	rcall	.+86     	; 0xcfa <__divsf3_pse+0x92>
     ca4:	fe 2f       	mov	r31, r30
     ca6:	29 d0       	rcall	.+82     	; 0xcfa <__divsf3_pse+0x92>
     ca8:	66 0f       	add	r22, r22
     caa:	77 1f       	adc	r23, r23
     cac:	88 1f       	adc	r24, r24
     cae:	bb 1f       	adc	r27, r27
     cb0:	26 17       	cp	r18, r22
     cb2:	37 07       	cpc	r19, r23
     cb4:	48 07       	cpc	r20, r24
     cb6:	ab 07       	cpc	r26, r27
     cb8:	b0 e8       	ldi	r27, 0x80	; 128
     cba:	09 f0       	breq	.+2      	; 0xcbe <__divsf3_pse+0x56>
     cbc:	bb 0b       	sbc	r27, r27
     cbe:	80 2d       	mov	r24, r0
     cc0:	bf 01       	movw	r22, r30
     cc2:	ff 27       	eor	r31, r31
     cc4:	93 58       	subi	r25, 0x83	; 131
     cc6:	5f 4f       	sbci	r21, 0xFF	; 255
     cc8:	3a f0       	brmi	.+14     	; 0xcd8 <__divsf3_pse+0x70>
     cca:	9e 3f       	cpi	r25, 0xFE	; 254
     ccc:	51 05       	cpc	r21, r1
     cce:	78 f0       	brcs	.+30     	; 0xcee <__divsf3_pse+0x86>
     cd0:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_inf>
     cd4:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_szero>
     cd8:	5f 3f       	cpi	r21, 0xFF	; 255
     cda:	e4 f3       	brlt	.-8      	; 0xcd4 <__divsf3_pse+0x6c>
     cdc:	98 3e       	cpi	r25, 0xE8	; 232
     cde:	d4 f3       	brlt	.-12     	; 0xcd4 <__divsf3_pse+0x6c>
     ce0:	86 95       	lsr	r24
     ce2:	77 95       	ror	r23
     ce4:	67 95       	ror	r22
     ce6:	b7 95       	ror	r27
     ce8:	f7 95       	ror	r31
     cea:	9f 5f       	subi	r25, 0xFF	; 255
     cec:	c9 f7       	brne	.-14     	; 0xce0 <__divsf3_pse+0x78>
     cee:	88 0f       	add	r24, r24
     cf0:	91 1d       	adc	r25, r1
     cf2:	96 95       	lsr	r25
     cf4:	87 95       	ror	r24
     cf6:	97 f9       	bld	r25, 7
     cf8:	08 95       	ret
     cfa:	e1 e0       	ldi	r30, 0x01	; 1
     cfc:	66 0f       	add	r22, r22
     cfe:	77 1f       	adc	r23, r23
     d00:	88 1f       	adc	r24, r24
     d02:	bb 1f       	adc	r27, r27
     d04:	62 17       	cp	r22, r18
     d06:	73 07       	cpc	r23, r19
     d08:	84 07       	cpc	r24, r20
     d0a:	ba 07       	cpc	r27, r26
     d0c:	20 f0       	brcs	.+8      	; 0xd16 <__divsf3_pse+0xae>
     d0e:	62 1b       	sub	r22, r18
     d10:	73 0b       	sbc	r23, r19
     d12:	84 0b       	sbc	r24, r20
     d14:	ba 0b       	sbc	r27, r26
     d16:	ee 1f       	adc	r30, r30
     d18:	88 f7       	brcc	.-30     	; 0xcfc <__divsf3_pse+0x94>
     d1a:	e0 95       	com	r30
     d1c:	08 95       	ret

00000d1e <__fixsfsi>:
     d1e:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fixunssfsi>
     d22:	68 94       	set
     d24:	b1 11       	cpse	r27, r1
     d26:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_szero>
     d2a:	08 95       	ret

00000d2c <__fixunssfsi>:
     d2c:	0e 94 56 07 	call	0xeac	; 0xeac <__fp_splitA>
     d30:	88 f0       	brcs	.+34     	; 0xd54 <__fixunssfsi+0x28>
     d32:	9f 57       	subi	r25, 0x7F	; 127
     d34:	98 f0       	brcs	.+38     	; 0xd5c <__fixunssfsi+0x30>
     d36:	b9 2f       	mov	r27, r25
     d38:	99 27       	eor	r25, r25
     d3a:	b7 51       	subi	r27, 0x17	; 23
     d3c:	b0 f0       	brcs	.+44     	; 0xd6a <__fixunssfsi+0x3e>
     d3e:	e1 f0       	breq	.+56     	; 0xd78 <__fixunssfsi+0x4c>
     d40:	66 0f       	add	r22, r22
     d42:	77 1f       	adc	r23, r23
     d44:	88 1f       	adc	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	1a f0       	brmi	.+6      	; 0xd50 <__fixunssfsi+0x24>
     d4a:	ba 95       	dec	r27
     d4c:	c9 f7       	brne	.-14     	; 0xd40 <__fixunssfsi+0x14>
     d4e:	14 c0       	rjmp	.+40     	; 0xd78 <__fixunssfsi+0x4c>
     d50:	b1 30       	cpi	r27, 0x01	; 1
     d52:	91 f0       	breq	.+36     	; 0xd78 <__fixunssfsi+0x4c>
     d54:	0e 94 70 07 	call	0xee0	; 0xee0 <__fp_zero>
     d58:	b1 e0       	ldi	r27, 0x01	; 1
     d5a:	08 95       	ret
     d5c:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__fp_zero>
     d60:	67 2f       	mov	r22, r23
     d62:	78 2f       	mov	r23, r24
     d64:	88 27       	eor	r24, r24
     d66:	b8 5f       	subi	r27, 0xF8	; 248
     d68:	39 f0       	breq	.+14     	; 0xd78 <__fixunssfsi+0x4c>
     d6a:	b9 3f       	cpi	r27, 0xF9	; 249
     d6c:	cc f3       	brlt	.-14     	; 0xd60 <__fixunssfsi+0x34>
     d6e:	86 95       	lsr	r24
     d70:	77 95       	ror	r23
     d72:	67 95       	ror	r22
     d74:	b3 95       	inc	r27
     d76:	d9 f7       	brne	.-10     	; 0xd6e <__fixunssfsi+0x42>
     d78:	3e f4       	brtc	.+14     	; 0xd88 <__fixunssfsi+0x5c>
     d7a:	90 95       	com	r25
     d7c:	80 95       	com	r24
     d7e:	70 95       	com	r23
     d80:	61 95       	neg	r22
     d82:	7f 4f       	sbci	r23, 0xFF	; 255
     d84:	8f 4f       	sbci	r24, 0xFF	; 255
     d86:	9f 4f       	sbci	r25, 0xFF	; 255
     d88:	08 95       	ret

00000d8a <__floatunsisf>:
     d8a:	e8 94       	clt
     d8c:	09 c0       	rjmp	.+18     	; 0xda0 <__floatsisf+0x12>

00000d8e <__floatsisf>:
     d8e:	97 fb       	bst	r25, 7
     d90:	3e f4       	brtc	.+14     	; 0xda0 <__floatsisf+0x12>
     d92:	90 95       	com	r25
     d94:	80 95       	com	r24
     d96:	70 95       	com	r23
     d98:	61 95       	neg	r22
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	8f 4f       	sbci	r24, 0xFF	; 255
     d9e:	9f 4f       	sbci	r25, 0xFF	; 255
     da0:	99 23       	and	r25, r25
     da2:	a9 f0       	breq	.+42     	; 0xdce <__floatsisf+0x40>
     da4:	f9 2f       	mov	r31, r25
     da6:	96 e9       	ldi	r25, 0x96	; 150
     da8:	bb 27       	eor	r27, r27
     daa:	93 95       	inc	r25
     dac:	f6 95       	lsr	r31
     dae:	87 95       	ror	r24
     db0:	77 95       	ror	r23
     db2:	67 95       	ror	r22
     db4:	b7 95       	ror	r27
     db6:	f1 11       	cpse	r31, r1
     db8:	f8 cf       	rjmp	.-16     	; 0xdaa <__floatsisf+0x1c>
     dba:	fa f4       	brpl	.+62     	; 0xdfa <__floatsisf+0x6c>
     dbc:	bb 0f       	add	r27, r27
     dbe:	11 f4       	brne	.+4      	; 0xdc4 <__floatsisf+0x36>
     dc0:	60 ff       	sbrs	r22, 0
     dc2:	1b c0       	rjmp	.+54     	; 0xdfa <__floatsisf+0x6c>
     dc4:	6f 5f       	subi	r22, 0xFF	; 255
     dc6:	7f 4f       	sbci	r23, 0xFF	; 255
     dc8:	8f 4f       	sbci	r24, 0xFF	; 255
     dca:	9f 4f       	sbci	r25, 0xFF	; 255
     dcc:	16 c0       	rjmp	.+44     	; 0xdfa <__floatsisf+0x6c>
     dce:	88 23       	and	r24, r24
     dd0:	11 f0       	breq	.+4      	; 0xdd6 <__floatsisf+0x48>
     dd2:	96 e9       	ldi	r25, 0x96	; 150
     dd4:	11 c0       	rjmp	.+34     	; 0xdf8 <__floatsisf+0x6a>
     dd6:	77 23       	and	r23, r23
     dd8:	21 f0       	breq	.+8      	; 0xde2 <__floatsisf+0x54>
     dda:	9e e8       	ldi	r25, 0x8E	; 142
     ddc:	87 2f       	mov	r24, r23
     dde:	76 2f       	mov	r23, r22
     de0:	05 c0       	rjmp	.+10     	; 0xdec <__floatsisf+0x5e>
     de2:	66 23       	and	r22, r22
     de4:	71 f0       	breq	.+28     	; 0xe02 <__floatsisf+0x74>
     de6:	96 e8       	ldi	r25, 0x86	; 134
     de8:	86 2f       	mov	r24, r22
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	2a f0       	brmi	.+10     	; 0xdfa <__floatsisf+0x6c>
     df0:	9a 95       	dec	r25
     df2:	66 0f       	add	r22, r22
     df4:	77 1f       	adc	r23, r23
     df6:	88 1f       	adc	r24, r24
     df8:	da f7       	brpl	.-10     	; 0xdf0 <__floatsisf+0x62>
     dfa:	88 0f       	add	r24, r24
     dfc:	96 95       	lsr	r25
     dfe:	87 95       	ror	r24
     e00:	97 f9       	bld	r25, 7
     e02:	08 95       	ret

00000e04 <__fp_cmp>:
     e04:	99 0f       	add	r25, r25
     e06:	00 08       	sbc	r0, r0
     e08:	55 0f       	add	r21, r21
     e0a:	aa 0b       	sbc	r26, r26
     e0c:	e0 e8       	ldi	r30, 0x80	; 128
     e0e:	fe ef       	ldi	r31, 0xFE	; 254
     e10:	16 16       	cp	r1, r22
     e12:	17 06       	cpc	r1, r23
     e14:	e8 07       	cpc	r30, r24
     e16:	f9 07       	cpc	r31, r25
     e18:	c0 f0       	brcs	.+48     	; 0xe4a <__fp_cmp+0x46>
     e1a:	12 16       	cp	r1, r18
     e1c:	13 06       	cpc	r1, r19
     e1e:	e4 07       	cpc	r30, r20
     e20:	f5 07       	cpc	r31, r21
     e22:	98 f0       	brcs	.+38     	; 0xe4a <__fp_cmp+0x46>
     e24:	62 1b       	sub	r22, r18
     e26:	73 0b       	sbc	r23, r19
     e28:	84 0b       	sbc	r24, r20
     e2a:	95 0b       	sbc	r25, r21
     e2c:	39 f4       	brne	.+14     	; 0xe3c <__fp_cmp+0x38>
     e2e:	0a 26       	eor	r0, r26
     e30:	61 f0       	breq	.+24     	; 0xe4a <__fp_cmp+0x46>
     e32:	23 2b       	or	r18, r19
     e34:	24 2b       	or	r18, r20
     e36:	25 2b       	or	r18, r21
     e38:	21 f4       	brne	.+8      	; 0xe42 <__fp_cmp+0x3e>
     e3a:	08 95       	ret
     e3c:	0a 26       	eor	r0, r26
     e3e:	09 f4       	brne	.+2      	; 0xe42 <__fp_cmp+0x3e>
     e40:	a1 40       	sbci	r26, 0x01	; 1
     e42:	a6 95       	lsr	r26
     e44:	8f ef       	ldi	r24, 0xFF	; 255
     e46:	81 1d       	adc	r24, r1
     e48:	81 1d       	adc	r24, r1
     e4a:	08 95       	ret

00000e4c <__fp_inf>:
     e4c:	97 f9       	bld	r25, 7
     e4e:	9f 67       	ori	r25, 0x7F	; 127
     e50:	80 e8       	ldi	r24, 0x80	; 128
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	08 95       	ret

00000e58 <__fp_nan>:
     e58:	9f ef       	ldi	r25, 0xFF	; 255
     e5a:	80 ec       	ldi	r24, 0xC0	; 192
     e5c:	08 95       	ret

00000e5e <__fp_pscA>:
     e5e:	00 24       	eor	r0, r0
     e60:	0a 94       	dec	r0
     e62:	16 16       	cp	r1, r22
     e64:	17 06       	cpc	r1, r23
     e66:	18 06       	cpc	r1, r24
     e68:	09 06       	cpc	r0, r25
     e6a:	08 95       	ret

00000e6c <__fp_pscB>:
     e6c:	00 24       	eor	r0, r0
     e6e:	0a 94       	dec	r0
     e70:	12 16       	cp	r1, r18
     e72:	13 06       	cpc	r1, r19
     e74:	14 06       	cpc	r1, r20
     e76:	05 06       	cpc	r0, r21
     e78:	08 95       	ret

00000e7a <__fp_round>:
     e7a:	09 2e       	mov	r0, r25
     e7c:	03 94       	inc	r0
     e7e:	00 0c       	add	r0, r0
     e80:	11 f4       	brne	.+4      	; 0xe86 <__fp_round+0xc>
     e82:	88 23       	and	r24, r24
     e84:	52 f0       	brmi	.+20     	; 0xe9a <__fp_round+0x20>
     e86:	bb 0f       	add	r27, r27
     e88:	40 f4       	brcc	.+16     	; 0xe9a <__fp_round+0x20>
     e8a:	bf 2b       	or	r27, r31
     e8c:	11 f4       	brne	.+4      	; 0xe92 <__fp_round+0x18>
     e8e:	60 ff       	sbrs	r22, 0
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <__fp_round+0x20>
     e92:	6f 5f       	subi	r22, 0xFF	; 255
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
     e96:	8f 4f       	sbci	r24, 0xFF	; 255
     e98:	9f 4f       	sbci	r25, 0xFF	; 255
     e9a:	08 95       	ret

00000e9c <__fp_split3>:
     e9c:	57 fd       	sbrc	r21, 7
     e9e:	90 58       	subi	r25, 0x80	; 128
     ea0:	44 0f       	add	r20, r20
     ea2:	55 1f       	adc	r21, r21
     ea4:	59 f0       	breq	.+22     	; 0xebc <__fp_splitA+0x10>
     ea6:	5f 3f       	cpi	r21, 0xFF	; 255
     ea8:	71 f0       	breq	.+28     	; 0xec6 <__fp_splitA+0x1a>
     eaa:	47 95       	ror	r20

00000eac <__fp_splitA>:
     eac:	88 0f       	add	r24, r24
     eae:	97 fb       	bst	r25, 7
     eb0:	99 1f       	adc	r25, r25
     eb2:	61 f0       	breq	.+24     	; 0xecc <__fp_splitA+0x20>
     eb4:	9f 3f       	cpi	r25, 0xFF	; 255
     eb6:	79 f0       	breq	.+30     	; 0xed6 <__fp_splitA+0x2a>
     eb8:	87 95       	ror	r24
     eba:	08 95       	ret
     ebc:	12 16       	cp	r1, r18
     ebe:	13 06       	cpc	r1, r19
     ec0:	14 06       	cpc	r1, r20
     ec2:	55 1f       	adc	r21, r21
     ec4:	f2 cf       	rjmp	.-28     	; 0xeaa <__fp_split3+0xe>
     ec6:	46 95       	lsr	r20
     ec8:	f1 df       	rcall	.-30     	; 0xeac <__fp_splitA>
     eca:	08 c0       	rjmp	.+16     	; 0xedc <__fp_splitA+0x30>
     ecc:	16 16       	cp	r1, r22
     ece:	17 06       	cpc	r1, r23
     ed0:	18 06       	cpc	r1, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	f1 cf       	rjmp	.-30     	; 0xeb8 <__fp_splitA+0xc>
     ed6:	86 95       	lsr	r24
     ed8:	71 05       	cpc	r23, r1
     eda:	61 05       	cpc	r22, r1
     edc:	08 94       	sec
     ede:	08 95       	ret

00000ee0 <__fp_zero>:
     ee0:	e8 94       	clt

00000ee2 <__fp_szero>:
     ee2:	bb 27       	eor	r27, r27
     ee4:	66 27       	eor	r22, r22
     ee6:	77 27       	eor	r23, r23
     ee8:	cb 01       	movw	r24, r22
     eea:	97 f9       	bld	r25, 7
     eec:	08 95       	ret

00000eee <__gesf2>:
     eee:	0e 94 02 07 	call	0xe04	; 0xe04 <__fp_cmp>
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <__gesf2+0x8>
     ef4:	8f ef       	ldi	r24, 0xFF	; 255
     ef6:	08 95       	ret

00000ef8 <__mulsf3>:
     ef8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__mulsf3x>
     efc:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__fp_round>
     f00:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__fp_pscA>
     f04:	38 f0       	brcs	.+14     	; 0xf14 <__mulsf3+0x1c>
     f06:	0e 94 36 07 	call	0xe6c	; 0xe6c <__fp_pscB>
     f0a:	20 f0       	brcs	.+8      	; 0xf14 <__mulsf3+0x1c>
     f0c:	95 23       	and	r25, r21
     f0e:	11 f0       	breq	.+4      	; 0xf14 <__mulsf3+0x1c>
     f10:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_inf>
     f14:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__fp_nan>
     f18:	11 24       	eor	r1, r1
     f1a:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_szero>

00000f1e <__mulsf3x>:
     f1e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__fp_split3>
     f22:	70 f3       	brcs	.-36     	; 0xf00 <__mulsf3+0x8>

00000f24 <__mulsf3_pse>:
     f24:	95 9f       	mul	r25, r21
     f26:	c1 f3       	breq	.-16     	; 0xf18 <__mulsf3+0x20>
     f28:	95 0f       	add	r25, r21
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	55 1f       	adc	r21, r21
     f2e:	62 9f       	mul	r22, r18
     f30:	f0 01       	movw	r30, r0
     f32:	72 9f       	mul	r23, r18
     f34:	bb 27       	eor	r27, r27
     f36:	f0 0d       	add	r31, r0
     f38:	b1 1d       	adc	r27, r1
     f3a:	63 9f       	mul	r22, r19
     f3c:	aa 27       	eor	r26, r26
     f3e:	f0 0d       	add	r31, r0
     f40:	b1 1d       	adc	r27, r1
     f42:	aa 1f       	adc	r26, r26
     f44:	64 9f       	mul	r22, r20
     f46:	66 27       	eor	r22, r22
     f48:	b0 0d       	add	r27, r0
     f4a:	a1 1d       	adc	r26, r1
     f4c:	66 1f       	adc	r22, r22
     f4e:	82 9f       	mul	r24, r18
     f50:	22 27       	eor	r18, r18
     f52:	b0 0d       	add	r27, r0
     f54:	a1 1d       	adc	r26, r1
     f56:	62 1f       	adc	r22, r18
     f58:	73 9f       	mul	r23, r19
     f5a:	b0 0d       	add	r27, r0
     f5c:	a1 1d       	adc	r26, r1
     f5e:	62 1f       	adc	r22, r18
     f60:	83 9f       	mul	r24, r19
     f62:	a0 0d       	add	r26, r0
     f64:	61 1d       	adc	r22, r1
     f66:	22 1f       	adc	r18, r18
     f68:	74 9f       	mul	r23, r20
     f6a:	33 27       	eor	r19, r19
     f6c:	a0 0d       	add	r26, r0
     f6e:	61 1d       	adc	r22, r1
     f70:	23 1f       	adc	r18, r19
     f72:	84 9f       	mul	r24, r20
     f74:	60 0d       	add	r22, r0
     f76:	21 1d       	adc	r18, r1
     f78:	82 2f       	mov	r24, r18
     f7a:	76 2f       	mov	r23, r22
     f7c:	6a 2f       	mov	r22, r26
     f7e:	11 24       	eor	r1, r1
     f80:	9f 57       	subi	r25, 0x7F	; 127
     f82:	50 40       	sbci	r21, 0x00	; 0
     f84:	9a f0       	brmi	.+38     	; 0xfac <__mulsf3_pse+0x88>
     f86:	f1 f0       	breq	.+60     	; 0xfc4 <__mulsf3_pse+0xa0>
     f88:	88 23       	and	r24, r24
     f8a:	4a f0       	brmi	.+18     	; 0xf9e <__mulsf3_pse+0x7a>
     f8c:	ee 0f       	add	r30, r30
     f8e:	ff 1f       	adc	r31, r31
     f90:	bb 1f       	adc	r27, r27
     f92:	66 1f       	adc	r22, r22
     f94:	77 1f       	adc	r23, r23
     f96:	88 1f       	adc	r24, r24
     f98:	91 50       	subi	r25, 0x01	; 1
     f9a:	50 40       	sbci	r21, 0x00	; 0
     f9c:	a9 f7       	brne	.-22     	; 0xf88 <__mulsf3_pse+0x64>
     f9e:	9e 3f       	cpi	r25, 0xFE	; 254
     fa0:	51 05       	cpc	r21, r1
     fa2:	80 f0       	brcs	.+32     	; 0xfc4 <__mulsf3_pse+0xa0>
     fa4:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_inf>
     fa8:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_szero>
     fac:	5f 3f       	cpi	r21, 0xFF	; 255
     fae:	e4 f3       	brlt	.-8      	; 0xfa8 <__mulsf3_pse+0x84>
     fb0:	98 3e       	cpi	r25, 0xE8	; 232
     fb2:	d4 f3       	brlt	.-12     	; 0xfa8 <__mulsf3_pse+0x84>
     fb4:	86 95       	lsr	r24
     fb6:	77 95       	ror	r23
     fb8:	67 95       	ror	r22
     fba:	b7 95       	ror	r27
     fbc:	f7 95       	ror	r31
     fbe:	e7 95       	ror	r30
     fc0:	9f 5f       	subi	r25, 0xFF	; 255
     fc2:	c1 f7       	brne	.-16     	; 0xfb4 <__mulsf3_pse+0x90>
     fc4:	fe 2b       	or	r31, r30
     fc6:	88 0f       	add	r24, r24
     fc8:	91 1d       	adc	r25, r1
     fca:	96 95       	lsr	r25
     fcc:	87 95       	ror	r24
     fce:	97 f9       	bld	r25, 7
     fd0:	08 95       	ret

00000fd2 <__divmodhi4>:
     fd2:	97 fb       	bst	r25, 7
     fd4:	07 2e       	mov	r0, r23
     fd6:	16 f4       	brtc	.+4      	; 0xfdc <__divmodhi4+0xa>
     fd8:	00 94       	com	r0
     fda:	07 d0       	rcall	.+14     	; 0xfea <__divmodhi4_neg1>
     fdc:	77 fd       	sbrc	r23, 7
     fde:	09 d0       	rcall	.+18     	; 0xff2 <__divmodhi4_neg2>
     fe0:	0e 94 fd 07 	call	0xffa	; 0xffa <__udivmodhi4>
     fe4:	07 fc       	sbrc	r0, 7
     fe6:	05 d0       	rcall	.+10     	; 0xff2 <__divmodhi4_neg2>
     fe8:	3e f4       	brtc	.+14     	; 0xff8 <__divmodhi4_exit>

00000fea <__divmodhi4_neg1>:
     fea:	90 95       	com	r25
     fec:	81 95       	neg	r24
     fee:	9f 4f       	sbci	r25, 0xFF	; 255
     ff0:	08 95       	ret

00000ff2 <__divmodhi4_neg2>:
     ff2:	70 95       	com	r23
     ff4:	61 95       	neg	r22
     ff6:	7f 4f       	sbci	r23, 0xFF	; 255

00000ff8 <__divmodhi4_exit>:
     ff8:	08 95       	ret

00000ffa <__udivmodhi4>:
     ffa:	aa 1b       	sub	r26, r26
     ffc:	bb 1b       	sub	r27, r27
     ffe:	51 e1       	ldi	r21, 0x11	; 17
    1000:	07 c0       	rjmp	.+14     	; 0x1010 <__udivmodhi4_ep>

00001002 <__udivmodhi4_loop>:
    1002:	aa 1f       	adc	r26, r26
    1004:	bb 1f       	adc	r27, r27
    1006:	a6 17       	cp	r26, r22
    1008:	b7 07       	cpc	r27, r23
    100a:	10 f0       	brcs	.+4      	; 0x1010 <__udivmodhi4_ep>
    100c:	a6 1b       	sub	r26, r22
    100e:	b7 0b       	sbc	r27, r23

00001010 <__udivmodhi4_ep>:
    1010:	88 1f       	adc	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	5a 95       	dec	r21
    1016:	a9 f7       	brne	.-22     	; 0x1002 <__udivmodhi4_loop>
    1018:	80 95       	com	r24
    101a:	90 95       	com	r25
    101c:	bc 01       	movw	r22, r24
    101e:	cd 01       	movw	r24, r26
    1020:	08 95       	ret

00001022 <__itoa_ncheck>:
    1022:	bb 27       	eor	r27, r27
    1024:	4a 30       	cpi	r20, 0x0A	; 10
    1026:	31 f4       	brne	.+12     	; 0x1034 <__itoa_ncheck+0x12>
    1028:	99 23       	and	r25, r25
    102a:	22 f4       	brpl	.+8      	; 0x1034 <__itoa_ncheck+0x12>
    102c:	bd e2       	ldi	r27, 0x2D	; 45
    102e:	90 95       	com	r25
    1030:	81 95       	neg	r24
    1032:	9f 4f       	sbci	r25, 0xFF	; 255
    1034:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__utoa_common>

00001038 <__utoa_ncheck>:
    1038:	bb 27       	eor	r27, r27

0000103a <__utoa_common>:
    103a:	fb 01       	movw	r30, r22
    103c:	55 27       	eor	r21, r21
    103e:	aa 27       	eor	r26, r26
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	aa 1f       	adc	r26, r26
    1046:	a4 17       	cp	r26, r20
    1048:	10 f0       	brcs	.+4      	; 0x104e <__utoa_common+0x14>
    104a:	a4 1b       	sub	r26, r20
    104c:	83 95       	inc	r24
    104e:	50 51       	subi	r21, 0x10	; 16
    1050:	b9 f7       	brne	.-18     	; 0x1040 <__utoa_common+0x6>
    1052:	a0 5d       	subi	r26, 0xD0	; 208
    1054:	aa 33       	cpi	r26, 0x3A	; 58
    1056:	08 f0       	brcs	.+2      	; 0x105a <__utoa_common+0x20>
    1058:	a9 5d       	subi	r26, 0xD9	; 217
    105a:	a1 93       	st	Z+, r26
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	79 f7       	brne	.-34     	; 0x103e <__utoa_common+0x4>
    1060:	b1 11       	cpse	r27, r1
    1062:	b1 93       	st	Z+, r27
    1064:	11 92       	st	Z+, r1
    1066:	cb 01       	movw	r24, r22
    1068:	0c 94 36 08 	jmp	0x106c	; 0x106c <strrev>

0000106c <strrev>:
    106c:	dc 01       	movw	r26, r24
    106e:	fc 01       	movw	r30, r24
    1070:	67 2f       	mov	r22, r23
    1072:	71 91       	ld	r23, Z+
    1074:	77 23       	and	r23, r23
    1076:	e1 f7       	brne	.-8      	; 0x1070 <strrev+0x4>
    1078:	32 97       	sbiw	r30, 0x02	; 2
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <strrev+0x18>
    107c:	7c 91       	ld	r23, X
    107e:	6d 93       	st	X+, r22
    1080:	70 83       	st	Z, r23
    1082:	62 91       	ld	r22, -Z
    1084:	ae 17       	cp	r26, r30
    1086:	bf 07       	cpc	r27, r31
    1088:	c8 f3       	brcs	.-14     	; 0x107c <strrev+0x10>
    108a:	08 95       	ret

0000108c <_exit>:
    108c:	f8 94       	cli

0000108e <__stop_program>:
    108e:	ff cf       	rjmp	.-2      	; 0x108e <__stop_program>
